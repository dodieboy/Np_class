# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: segment
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_segment', [dirname(__file__)])
        except ImportError:
            import _ida_segment
            return _ida_segment
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_segment', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_segment = swig_import_helper()
    del swig_import_helper
else:
    import _ida_segment
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

import ida_range
SREG_NUM = _ida_segment.SREG_NUM
"""
Maximum number of segment registers is 16 (see 'segregs.hpp' )
"""
class segment_t(ida_range.range_t):
    """
    Proxy of C++ segment_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> segment_t
        """
        this = _ida_segment.new_segment_t(*args)
        try: self.this.append(this)
        except: self.this = this
    name = _swig_property(_ida_segment.segment_t_name_get, _ida_segment.segment_t_name_set)
    sclass = _swig_property(_ida_segment.segment_t_sclass_get, _ida_segment.segment_t_sclass_set)
    orgbase = _swig_property(_ida_segment.segment_t_orgbase_get, _ida_segment.segment_t_orgbase_set)
    align = _swig_property(_ida_segment.segment_t_align_get, _ida_segment.segment_t_align_set)
    comb = _swig_property(_ida_segment.segment_t_comb_get, _ida_segment.segment_t_comb_set)
    perm = _swig_property(_ida_segment.segment_t_perm_get, _ida_segment.segment_t_perm_set)
    bitness = _swig_property(_ida_segment.segment_t_bitness_get, _ida_segment.segment_t_bitness_set)
    def use32(self, *args):
        """
        use32(self) -> bool
        """
        return _ida_segment.segment_t_use32(self, *args)

    def use64(self, *args):
        """
        use64(self) -> bool
        """
        return _ida_segment.segment_t_use64(self, *args)

    def abits(self, *args):
        """
        abits(self) -> int
        """
        return _ida_segment.segment_t_abits(self, *args)

    def abytes(self, *args):
        """
        abytes(self) -> int
        """
        return _ida_segment.segment_t_abytes(self, *args)

    flags = _swig_property(_ida_segment.segment_t_flags_get, _ida_segment.segment_t_flags_set)
    def comorg(self, *args):
        """
        comorg(self) -> bool
        """
        return _ida_segment.segment_t_comorg(self, *args)

    def set_comorg(self, *args):
        """
        set_comorg(self)
        """
        return _ida_segment.segment_t_set_comorg(self, *args)

    def clr_comorg(self, *args):
        """
        clr_comorg(self)
        """
        return _ida_segment.segment_t_clr_comorg(self, *args)

    def ob_ok(self, *args):
        """
        ob_ok(self) -> bool
        """
        return _ida_segment.segment_t_ob_ok(self, *args)

    def set_ob_ok(self, *args):
        """
        set_ob_ok(self)
        """
        return _ida_segment.segment_t_set_ob_ok(self, *args)

    def clr_ob_ok(self, *args):
        """
        clr_ob_ok(self)
        """
        return _ida_segment.segment_t_clr_ob_ok(self, *args)

    def is_visible_segm(self, *args):
        """
        is_visible_segm(self) -> bool
        """
        return _ida_segment.segment_t_is_visible_segm(self, *args)

    def set_visible_segm(self, *args):
        """
        set_visible_segm(self, visible)
        """
        return _ida_segment.segment_t_set_visible_segm(self, *args)

    def set_debugger_segm(self, *args):
        """
        set_debugger_segm(self, debseg)
        """
        return _ida_segment.segment_t_set_debugger_segm(self, *args)

    def is_loader_segm(self, *args):
        """
        is_loader_segm(self) -> bool
        """
        return _ida_segment.segment_t_is_loader_segm(self, *args)

    def set_loader_segm(self, *args):
        """
        set_loader_segm(self, ldrseg)
        """
        return _ida_segment.segment_t_set_loader_segm(self, *args)

    def is_hidden_segtype(self, *args):
        """
        is_hidden_segtype(self) -> bool
        """
        return _ida_segment.segment_t_is_hidden_segtype(self, *args)

    def set_hidden_segtype(self, *args):
        """
        set_hidden_segtype(self, hide)
        """
        return _ida_segment.segment_t_set_hidden_segtype(self, *args)

    def is_header_segm(self, *args):
        """
        is_header_segm(self) -> bool
        """
        return _ida_segment.segment_t_is_header_segm(self, *args)

    def set_header_segm(self, *args):
        """
        set_header_segm(self, on)
        """
        return _ida_segment.segment_t_set_header_segm(self, *args)

    sel = _swig_property(_ida_segment.segment_t_sel_get, _ida_segment.segment_t_sel_set)
    defsr = _swig_property(_ida_segment.segment_t_defsr_get, _ida_segment.segment_t_defsr_set)
    type = _swig_property(_ida_segment.segment_t_type_get, _ida_segment.segment_t_type_set)
    color = _swig_property(_ida_segment.segment_t_color_get, _ida_segment.segment_t_color_set)
    def update(self, *args):
        """
        update(self) -> bool
        """
        return _ida_segment.segment_t_update(self, *args)

    start_ea = _swig_property(_ida_segment.segment_t_start_ea_get, _ida_segment.segment_t_start_ea_set)
    end_ea = _swig_property(_ida_segment.segment_t_end_ea_get, _ida_segment.segment_t_end_ea_set)
    __swig_destroy__ = _ida_segment.delete_segment_t
    __del__ = lambda self : None;
segment_t_swigregister = _ida_segment.segment_t_swigregister
segment_t_swigregister(segment_t)
saAbs = _ida_segment.saAbs
"""
Absolute segment.
"""
saRelByte = _ida_segment.saRelByte
"""
Relocatable, byte aligned.
"""
saRelWord = _ida_segment.saRelWord
"""
Relocatable, word (2-byte) aligned.
"""
saRelPara = _ida_segment.saRelPara
"""
Relocatable, paragraph (16-byte) aligned.
"""
saRelPage = _ida_segment.saRelPage
"""
Relocatable, aligned on 256-byte boundary.
"""
saRelDble = _ida_segment.saRelDble
"""
boundary.

Relocatable, aligned on a double word (4-byte)
"""
saRel4K = _ida_segment.saRel4K
"""
alignment. It is not supported by LINK.

This value is used by the PharLap OMF for page (4K)
"""
saGroup = _ida_segment.saGroup
"""
Segment group.
"""
saRel32Bytes = _ida_segment.saRel32Bytes
"""
32 bytes
"""
saRel64Bytes = _ida_segment.saRel64Bytes
"""
64 bytes
"""
saRelQword = _ida_segment.saRelQword
"""
8 bytes
"""
saRel128Bytes = _ida_segment.saRel128Bytes
"""
128 bytes
"""
saRel512Bytes = _ida_segment.saRel512Bytes
"""
512 bytes
"""
saRel1024Bytes = _ida_segment.saRel1024Bytes
"""
1024 bytes
"""
saRel2048Bytes = _ida_segment.saRel2048Bytes
"""
2048 bytes
"""
saRel_MAX_ALIGN_CODE = _ida_segment.saRel_MAX_ALIGN_CODE
scPriv = _ida_segment.scPriv
"""
segment.

Private. Do not combine with any other program
"""
scGroup = _ida_segment.scGroup
"""
Segment group.
"""
scPub = _ida_segment.scPub
"""
the alignment requirement.

Public. Combine by appending at an offset that meets
"""
scPub2 = _ida_segment.scPub2
"""
As defined by Microsoft, same as C=2 (public).
"""
scStack = _ida_segment.scStack
"""
byte alignment.

Stack. Combine as for C=2. This combine type forces
"""
scCommon = _ida_segment.scCommon
"""
Common. Combine by overlay using maximum size.
"""
scPub3 = _ida_segment.scPub3
"""
As defined by Microsoft, same as C=2 (public).
"""
sc_MAX_COMB_CODE = _ida_segment.sc_MAX_COMB_CODE
SEGPERM_EXEC = _ida_segment.SEGPERM_EXEC
"""
Execute.
"""
SEGPERM_WRITE = _ida_segment.SEGPERM_WRITE
"""
Write.
"""
SEGPERM_READ = _ida_segment.SEGPERM_READ
"""
Read.
"""
SEGPERM_MAXVAL = _ida_segment.SEGPERM_MAXVAL
SEG_MAX_BITNESS_CODE = _ida_segment.SEG_MAX_BITNESS_CODE
SFL_COMORG = _ida_segment.SFL_COMORG
"""
IDP dependent field (IBM PC: if set, ORG directive is not commented
out)
"""
SFL_OBOK = _ida_segment.SFL_OBOK
"""
Orgbase is present? (IDP dependent field)
"""
SFL_HIDDEN = _ida_segment.SFL_HIDDEN
"""
Is the segment hidden?
"""
SFL_DEBUG = _ida_segment.SFL_DEBUG
"""
Is the segment created for the debugger?. Such segments are temporary
and do not have permanent flags.
"""
SFL_LOADER = _ida_segment.SFL_LOADER
"""
Is the segment created by the loader?
"""
SFL_HIDETYPE = _ida_segment.SFL_HIDETYPE
"""
Hide segment type (do not print it in the listing)
"""
SFL_HEADER = _ida_segment.SFL_HEADER
"""
Header segment (do not create offsets to it in the disassembly)
"""
SEG_NORM = _ida_segment.SEG_NORM
"""
unknown type, no assumptions
"""
SEG_XTRN = _ida_segment.SEG_XTRN
"""
no instructions are allowed

segment with 'extern' definitions.
"""
SEG_CODE = _ida_segment.SEG_CODE
"""
code segment
"""
SEG_DATA = _ida_segment.SEG_DATA
"""
data segment
"""
SEG_IMP = _ida_segment.SEG_IMP
"""
java: implementation segment
"""
SEG_GRP = _ida_segment.SEG_GRP
"""
group of segments
"""
SEG_NULL = _ida_segment.SEG_NULL
"""
zero-length segment
"""
SEG_UNDF = _ida_segment.SEG_UNDF
"""
undefined segment type (not used)
"""
SEG_BSS = _ida_segment.SEG_BSS
"""
uninitialized segment
"""
SEG_ABSSYM = _ida_segment.SEG_ABSSYM
"""
segment with definitions of absolute symbols
"""
SEG_COMM = _ida_segment.SEG_COMM
"""
segment with communal definitions
"""
SEG_IMEM = _ida_segment.SEG_IMEM
"""
internal processor memory & sfr (8051)
"""
SEG_MAX_SEGTYPE_CODE = _ida_segment.SEG_MAX_SEGTYPE_CODE


def is_visible_segm(*args):
  """
  is_visible_segm(s) -> bool


  See 'SFL_HIDDEN' .
  
  
  @param s (C++: segment_t  *)
  """
  return _ida_segment.is_visible_segm(*args)

def is_finally_visible_segm(*args):
  """
  is_finally_visible_segm(s) -> bool


  See 'SFL_HIDDEN' , 'SCF_SHHID_SEGM' .
  
  
  @param s (C++: segment_t  *)
  """
  return _ida_segment.is_finally_visible_segm(*args)

def set_visible_segm(*args):
  """
  set_visible_segm(s, visible)


  See 'SFL_HIDDEN' .
  
  
  @param s (C++: segment_t  *)
  @param visible (C++: bool)
  """
  return _ida_segment.set_visible_segm(*args)

def is_spec_segm(*args):
  """
  is_spec_segm(seg_type) -> bool


  Has segment a special type?. ( 'SEG_XTRN' , 'SEG_GRP' , 'SEG_ABSSYM' ,
  'SEG_COMM' )
  
  @param seg_type (C++: uchar)
  """
  return _ida_segment.is_spec_segm(*args)

def is_spec_ea(*args):
  """
  is_spec_ea(ea) -> bool


  Does the address belong to a segment with a special type?. (
  'SEG_XTRN' , 'SEG_GRP' , 'SEG_ABSSYM' , 'SEG_COMM' )
  
  @param ea: linear address (C++: ea_t)
  """
  return _ida_segment.is_spec_ea(*args)

def lock_segm(*args):
  """
  lock_segm(segm, lock)


  Lock segment pointer Locked pointers are guaranteed to remain valid
  until they are unlocked. Ranges with locked pointers cannot be deleted
  or moved.
  
  @param segm (C++: const  segment_t  *)
  @param lock (C++: bool)
  """
  return _ida_segment.lock_segm(*args)
class lock_segment(object):
    """
    Proxy of C++ lock_segment class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self, _segm) -> lock_segment
        """
        this = _ida_segment.new_lock_segment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_segment.delete_lock_segment
    __del__ = lambda self : None;
lock_segment_swigregister = _ida_segment.lock_segment_swigregister
lock_segment_swigregister(lock_segment)


def is_segm_locked(*args):
  """
  is_segm_locked(segm) -> bool


  Is a segment pointer locked?
  
  
  @param segm (C++: const  segment_t  *)
  """
  return _ida_segment.is_segm_locked(*args)

def getn_selector(*args):
  """
  getn_selector(n) -> bool


  Get description of selector (0.. 'get_selector_qty()' -1)
  
  
  @param n (C++: int)
  """
  return _ida_segment.getn_selector(*args)

def get_selector_qty(*args):
  """
  get_selector_qty() -> int


  Get number of defined selectors.
  """
  return _ida_segment.get_selector_qty(*args)

def setup_selector(*args):
  """
  setup_selector(segbase) -> sel_t


  Allocate a selector for a segment if necessary. You must call this
  function before calling 'add_segm_ex()' . 'add_segm()' calls this
  function itself, so you don't need to allocate a selector. This
  function will allocate a selector if 'segbase' requires more than 16
  bits and the current processor is IBM PC. Otherwise it will return the
  segbase value.
  
  @param segbase: a new segment base paragraph (C++: ea_t)
  @return: the allocated selector number
  """
  return _ida_segment.setup_selector(*args)

def allocate_selector(*args):
  """
  allocate_selector(segbase) -> sel_t


  Allocate a selector for a segment unconditionally. You must call this
  function before calling 'add_segm_ex()' . 'add_segm()' calls this
  function itself, so you don't need to allocate a selector. This
  function will allocate a new free selector and setup its mapping using
  'find_free_selector()' and 'set_selector()' functions.
  
  @param segbase: a new segment base paragraph (C++: ea_t)
  @return: the allocated selector number
  """
  return _ida_segment.allocate_selector(*args)

def find_free_selector(*args):
  """
  find_free_selector() -> sel_t


  Find first unused selector.
  
  @return: a number >= 1
  """
  return _ida_segment.find_free_selector(*args)

def set_selector(*args):
  """
  set_selector(selector, paragraph) -> int


  Set mapping of selector to a paragraph. You should call this
  functionbeforecreating a segment which uses the selector, otherwise
  the creation of the segment will fail.
  
  @param selector: number of selector to map   if selector ==  BADSEL ,
                   then return 0 (fail)   if the selector has had a
                   mapping, old mapping is destroyed   if the selector
                   number is equal to paragraph value, then the mapping
                   is destroyed because we don't need to keep trivial
                   mappings. (C++: sel_t)
  @param paragraph: paragraph to map selector (C++: ea_t)
  """
  return _ida_segment.set_selector(*args)

def del_selector(*args):
  """
  del_selector(selector)


  Delete mapping of a selector. Be wary of deleting selectors that are
  being used in the program, this can make a mess in the segments.
  
  @param selector: number of selector to remove from the translation
                   table (C++: sel_t)
  """
  return _ida_segment.del_selector(*args)

def sel2para(*args):
  """
  sel2para(selector) -> ea_t


  Get mapping of a selector.
  
  @param selector: number of selector to translate (C++: sel_t)
  @return: paragraph the specified selector is mapped to. if there is no
           mapping, returns 'selector'.
  """
  return _ida_segment.sel2para(*args)

def sel2ea(*args):
  """
  sel2ea(selector) -> ea_t


  Get mapping of a selector as a linear address.
  
  @param selector: number of selector to translate to linear address
                   (C++: sel_t)
  @return: linear address the specified selector is mapped to. if there
           is no mapping, returns to_ea(selector,0);
  """
  return _ida_segment.sel2ea(*args)

def find_selector(*args):
  """
  find_selector(base) -> sel_t


  Find a selector that has mapping to the specified paragraph.
  
  @param base: paragraph to search in the translation table (C++: ea_t)
  @return: selector value or base
  """
  return _ida_segment.find_selector(*args)

def get_segm_by_sel(*args):
  """
  get_segm_by_sel(selector) -> segment_t


  Get pointer to segment structure. This function finds a segment by its
  selector. If there are several segments with the same selectors, the
  last one will be returned.
  
  @param selector: a segment with the specified selector will be
                   returned (C++: sel_t)
  @return: pointer to segment or NULL
  """
  return _ida_segment.get_segm_by_sel(*args)

def add_segm_ex(*args):
  """
  add_segm_ex(s, name, sclass, flags) -> bool


  Add a new segment. If a segment already exists at the specified range
  of addresses, this segment will be truncated. Instructions and data in
  the old segment will be deleted if the new segment has another
  addressing mode or another segment base address.
  
  @param s: pointer to filled segment structure. segment selector should
            have proper mapping (see  set_selector() ).   if
            s.start_ea== BADADDR  then s.start_ea <- get_segm_base(&s)
            if s.end_ea== BADADDR , then a segment up to the next
            segment will be created (if the next segment doesn't exist,
            then 1 byte segment will be created).   if the s.end_ea <
            s.start_ea, then fail.   if s.end_ea is too high and the new
            segment would overlap the next segment, s.end_ea is adjusted
            properly. (C++: segment_t  *)
  @param name: name of new segment. may be NULL. if specified, the
               segment is immediately renamed (C++: const char *)
  @param sclass: class of the segment. may be NULL. if specified, the
                 segment class is immediately changed (C++: const char
                 *)
  @param flags: Add segment flags (C++: int)
  """
  return _ida_segment.add_segm_ex(*args)
ADDSEG_NOSREG = _ida_segment.ADDSEG_NOSREG
"""
(undefine all default segment registers)

set all default segment register values to 'BADSEL'
"""
ADDSEG_OR_DIE = _ida_segment.ADDSEG_OR_DIE
"""
 'qexit()' if can't add a segment
"""
ADDSEG_NOTRUNC = _ida_segment.ADDSEG_NOTRUNC
"""
destroy/truncate old segments instead.

don't truncate the new segment at the beginning of the next segment if
they overlap.
"""
ADDSEG_QUIET = _ida_segment.ADDSEG_QUIET
"""
silent mode, no "Adding segment..." in the messages window
"""
ADDSEG_FILLGAP = _ida_segment.ADDSEG_FILLGAP
"""
fill gap between new segment and previous one. i.e. if such a gap
exists, and this gap is less than 64K, then fill the gap by extending
the previous segment and adding .align directive to it. This way we
avoid gaps between segments. too many gaps lead to a virtual array
failure. it cannot hold more than ~1000 gaps.
"""
ADDSEG_SPARSE = _ida_segment.ADDSEG_SPARSE
"""
use sparse storage method for the new segment
"""
ADDSEG_NOAA = _ida_segment.ADDSEG_NOAA
"""
do not mark new segment for auto-analysis
"""
ADDSEG_IDBENC = _ida_segment.ADDSEG_IDBENC
"""
non-ASCII bytes will be decoded accordingly

'name' and 'sclass' are given in the IDB encoding;
"""

def add_segm(*args):
  """
  add_segm(para, start, end, name, sclass, flags=0) -> bool


  Add a new segment, second form. Segment alignment is set to
  'saRelByte' . Segment combination is "public" or "stack" (if segment
  class is "STACK"). Addressing mode of segment is taken as default
  (16bit or 32bit). Default segment registers are set to 'BADSEL' . If a
  segment already exists at the specified range of addresses, this
  segment will be truncated. Instructions and data in the old segment
  will be deleted if the new segment has another addressing mode or
  another segment base address.
  
  @param para: segment base paragraph. if paragraph can't fit in 16bit,
               then a new selector is allocated and mapped to the
               paragraph. (C++: ea_t)
  @param start: start address of the segment. if start== BADADDR  then
                start <- to_ea(para,0). (C++: ea_t)
  @param end: end address of the segment. end address should be higher
              than start address. For emulate empty segments, use
              SEG_NULL  segment type. If the end address is lower than
              start address, then fail. If end== BADADDR , then a
              segment up to the next segment will be created (if the
              next segment doesn't exist, then 1 byte segment will be
              created). If 'end' is too high and the new segment would
              overlap the next segment, 'end' is adjusted properly.
              (C++: ea_t)
  @param name: name of new segment. may be NULL (C++: const char *)
  @param sclass: class of the segment. may be NULL. type of the new
                 segment is modified if class is one of predefined
                 names:   "CODE" ->  SEG_CODE   "DATA" ->  SEG_DATA
                 "CONST" ->  SEG_DATA   "STACK" ->  SEG_BSS   "BSS" ->
                 SEG_BSS   "XTRN" ->  SEG_XTRN   "COMM" ->  SEG_COMM
                 "ABS" ->  SEG_ABSSYM (C++: const char *)
  @param flags (C++: int)
  """
  return _ida_segment.add_segm(*args)

def del_segm(*args):
  """
  del_segm(ea, flags) -> bool


  Delete a segment.
  
  @param ea: any address belonging to the segment (C++: ea_t)
  @param flags: Segment modification flags (C++: int)
  """
  return _ida_segment.del_segm(*args)
SEGMOD_KILL = _ida_segment.SEGMOD_KILL
"""
disable addresses if segment gets shrinked or deleted
"""
SEGMOD_KEEP = _ida_segment.SEGMOD_KEEP
"""
keep information (code & data, etc)
"""
SEGMOD_SILENT = _ida_segment.SEGMOD_SILENT
"""
be silent
"""
SEGMOD_KEEP0 = _ida_segment.SEGMOD_KEEP0
"""
flag for internal use, don't set
"""
SEGMOD_KEEPSEL = _ida_segment.SEGMOD_KEEPSEL
"""
do not try to delete unused selector
"""
SEGMOD_NOMOVE = _ida_segment.SEGMOD_NOMOVE
"""
(for 'set_segm_start()' )

don't move info from the start of segment to the new start address
"""
SEGMOD_SPARSE = _ida_segment.SEGMOD_SPARSE
"""
(for 'set_segm_start()' , 'set_segm_end()' )

use sparse storage if extending the segment
"""

def get_segm_qty(*args):
  """
  get_segm_qty() -> int


  Get number of segments.
  """
  return _ida_segment.get_segm_qty(*args)

def getseg(*args):
  """
  getseg(ea) -> segment_t


  Get pointer to segment by linear address.
  
  @param ea: linear address belonging to the segment (C++: ea_t)
  @return: NULL or pointer to segment structure
  """
  return _ida_segment.getseg(*args)

def getnseg(*args):
  """
  getnseg(n) -> segment_t


  Get pointer to segment by its number.Obsoleted because it can slow
  down the debugger (it has to refresh the whole memory segmentation to
  calculate the correct answer)
  
  @param n: segment number in the range (0.. get_segm_qty() -1) (C++:
            int)
  @return: NULL or pointer to segment structure
  """
  return _ida_segment.getnseg(*args)

def get_segm_num(*args):
  """
  get_segm_num(ea) -> int


  Get number of segment by address.
  
  @param ea: linear address belonging to the segment (C++: ea_t)
  @return: -1 if no segment occupies the specified address. otherwise
           returns number of the specified segment (0.. get_segm_qty()
           -1)
  """
  return _ida_segment.get_segm_num(*args)

def get_next_seg(*args):
  """
  get_next_seg(ea) -> segment_t


  Get pointer to the next segment.
  
  
  @param ea (C++: ea_t)
  """
  return _ida_segment.get_next_seg(*args)

def get_prev_seg(*args):
  """
  get_prev_seg(ea) -> segment_t


  Get pointer to the previous segment.
  
  
  @param ea (C++: ea_t)
  """
  return _ida_segment.get_prev_seg(*args)

def get_first_seg(*args):
  """
  get_first_seg() -> segment_t


  Get pointer to the first segment.
  """
  return _ida_segment.get_first_seg(*args)

def get_last_seg(*args):
  """
  get_last_seg() -> segment_t


  Get pointer to the last segment.
  """
  return _ida_segment.get_last_seg(*args)

def get_segm_by_name(*args):
  """
  get_segm_by_name(name) -> segment_t


  Get pointer to segment by its name. If there are several segments with
  the same name, returns the first of them.
  
  @param name: segment name. may be NULL. (C++: const char *)
  @return: NULL or pointer to segment structure
  """
  return _ida_segment.get_segm_by_name(*args)

def set_segm_end(*args):
  """
  set_segm_end(ea, newend, flags) -> bool


  Set segment end address. The next segment is shrinked to allow
  expansion of the specified segment. The kernel might even delete the
  next segment if necessary. The kernel will ask the user for a
  permission to destroy instructions or data going out of segment scope
  if such instructions exist.
  
  @param ea: any address belonging to the segment (C++: ea_t)
  @param newend: new end address of the segment (C++: ea_t)
  @param flags: Segment modification flags (C++: int)
  """
  return _ida_segment.set_segm_end(*args)

def set_segm_start(*args):
  """
  set_segm_start(ea, newstart, flags) -> bool


  Set segment start address. The previous segment is trimmed to allow
  expansion of the specified segment. The kernel might even delete the
  previous segment if necessary. The kernel will ask the user for a
  permission to destroy instructions or data going out of segment scope
  if such instructions exist.
  
  @param ea: any address belonging to the segment (C++: ea_t)
  @param newstart: new start address of the segment note that segment
                   start address should be higher than segment base
                   linear address. (C++: ea_t)
  @param flags: Segment modification flags (C++: int)
  """
  return _ida_segment.set_segm_start(*args)

def move_segm_start(*args):
  """
  move_segm_start(ea, newstart, mode) -> bool


  Move segment start. The main difference between this function and
  'set_segm_start()' is that this function may expand the previous
  segment while 'set_segm_start()' never does it. So, this function
  allows to change bounds of two segments simultaneously. If the
  previous segment and the specified segment have the same addressing
  mode and segment base, then instructions and data are not destroyed -
  they simply move from one segment to another. Otherwise all
  instructions/data which migrate from one segment to another are
  destroyed.this function never disables addresses.
  
  @param ea: any address belonging to the segment (C++: ea_t)
  @param newstart: new start address of the segment note that segment
                   start address should be higher than segment base
                   linear address. (C++: ea_t)
  @param mode: policy for destroying defined items   0: if it is
               necessary to destroy defined items, display a dialog box
               and ask confirmation   1: if it is necessary to destroy
               defined items, just destroy them without asking the user
               -1: if it is necessary to destroy defined items, don't
               destroy them (i.e. function will fail)   -2: don't
               destroy defined items (function will succeed) (C++: int)
  """
  return _ida_segment.move_segm_start(*args)

def move_segm(*args):
  """
  move_segm(s, to, flags=0) -> int


  Move a segment to a new address. This function moves all information
  to the new address. It fixes up address sensitive information in the
  kernel. The total effect is equal to reloading the segment to the
  target address. For the file format dependent address sensitive
  information, 'loader_t::move_segm' is called. Also IDB notification
  event 'idb_event::segm_moved' is called.
  
  @param s: segment to move (C++: segment_t  *)
  @param to: new segment start address (C++: ea_t)
  @param flags: Move segment flags (C++: int)
  @return: Move segment result codes
  """
  return _ida_segment.move_segm(*args)
MSF_SILENT = _ida_segment.MSF_SILENT
"""
don't display a "please wait" box on the screen
"""
MSF_NOFIX = _ida_segment.MSF_NOFIX
"""
don't call the loader to fix relocations
"""
MSF_LDKEEP = _ida_segment.MSF_LDKEEP
"""
keep the loader in the memory (optimization)
"""
MSF_FIXONCE = _ida_segment.MSF_FIXONCE
"""
valid for 'rebase_program()' . see 'loader_t::move_segm' .

call loader only once with the special calling method.
"""
MSF_PRIORITY = _ida_segment.MSF_PRIORITY
"""
valid for 'move_segm()'

loader segments will overwrite any existing debugger segments when
moved.
"""
MSF_NETNODES = _ida_segment.MSF_NETNODES
"""
valid for 'rebase_program()'

move netnodes instead of changing inf.netdelta (this is slower)
"""
MOVE_SEGM_OK = _ida_segment.MOVE_SEGM_OK
"""
all ok
"""
MOVE_SEGM_PARAM = _ida_segment.MOVE_SEGM_PARAM
"""
The specified segment does not exist.
"""
MOVE_SEGM_ROOM = _ida_segment.MOVE_SEGM_ROOM
"""
Not enough free room at the target address.
"""
MOVE_SEGM_IDP = _ida_segment.MOVE_SEGM_IDP
"""
IDP module forbids moving the segment.
"""
MOVE_SEGM_CHUNK = _ida_segment.MOVE_SEGM_CHUNK
"""
Too many chunks are defined, can't move.
"""
MOVE_SEGM_LOADER = _ida_segment.MOVE_SEGM_LOADER
"""
The segment has been moved but the loader complained.
"""
MOVE_SEGM_ODD = _ida_segment.MOVE_SEGM_ODD
"""
Cannot move segments by an odd number of bytes.
"""
MOVE_SEGM_ORPHAN = _ida_segment.MOVE_SEGM_ORPHAN
"""
Orphan bytes hinder segment movement.
"""
MOVE_SEGM_DEBUG = _ida_segment.MOVE_SEGM_DEBUG
"""
Debugger segments cannot be moved.
"""

def change_segment_status(*args):
  """
  change_segment_status(s, is_deb_segm) -> int


  Convert a debugger segment to a regular segment and vice versa. When
  converting debug->regular, the memory contents will be copied to the
  database.
  
  @param s: segment to modify (C++: segment_t  *)
  @param is_deb_segm: new status of the segment (C++: bool)
  @return: Change segment status result codes
  """
  return _ida_segment.change_segment_status(*args)
CSS_OK = _ida_segment.CSS_OK
"""
ok
"""
CSS_NODBG = _ida_segment.CSS_NODBG
"""
debugger is not running
"""
CSS_NORANGE = _ida_segment.CSS_NORANGE
"""
could not find corresponding memory range
"""
CSS_NOMEM = _ida_segment.CSS_NOMEM
"""
is too big)

not enough memory (might be because the segment
"""
CSS_BREAK = _ida_segment.CSS_BREAK
"""
memory reading process stopped by user
"""

def take_memory_snapshot(*args):
  """
  take_memory_snapshot(only_loader_segs) -> bool


  Take a memory snapshot of the running process.
  
  @param only_loader_segs: only is_loader_segm() segments will be
                           affected (C++: bool)
  @return: success
  """
  return _ida_segment.take_memory_snapshot(*args)

def is_miniidb(*args):
  """
  is_miniidb() -> bool


  Is the database a miniidb created by the debugger?.
  
  @return: true if the database contains no segments or only debugger
           segments
  """
  return _ida_segment.is_miniidb(*args)

def set_segm_base(*args):
  """
  set_segm_base(s, newbase) -> bool


  Internal function.
  
  
  @param s (C++: segment_t  *)
  @param newbase (C++: ea_t)
  """
  return _ida_segment.set_segm_base(*args)

def set_group_selector(*args):
  """
  set_group_selector(grp, sel) -> int


  Initialize groups. The kernel calls this function at the start of
  work.Create a new group of segments (used OMF files).
  
  @param grp: selector of group segment (segment type is  SEG_GRP ) You
              should create an 'empty' (1 byte) group segment It won't
              contain anything and will be used to redirect references
              to the group of segments to the common selector. (C++:
              sel_t)
  @param sel: common selector of all segments belonging to the segment
              You should create all segments within the group with the
              same selector value. (C++: sel_t)
  @return: 1 ok
  """
  return _ida_segment.set_group_selector(*args)
MAX_GROUPS = _ida_segment.MAX_GROUPS
"""
max number of segment groups
"""

def get_group_selector(*args):
  """
  get_group_selector(grpsel) -> sel_t


  Get common selector for a group of segments.
  
  @param grpsel: selector of group segment (C++: sel_t)
  @return: common selector of the group or 'grpsel' if no such group is
           found
  """
  return _ida_segment.get_group_selector(*args)

def add_segment_translation(*args):
  """
  add_segment_translation(segstart, mappedseg) -> bool


  Add segment translation.
  
  @param segstart: start address of the segment to add translation to
                   (C++: ea_t)
  @param mappedseg: start address of the overlayed segment (C++: ea_t)
  """
  return _ida_segment.add_segment_translation(*args)
MAX_SEGM_TRANSLATIONS = _ida_segment.MAX_SEGM_TRANSLATIONS
"""
max number of segment translations
"""

def set_segment_translations(*args):
  """
  set_segment_translations(segstart, transmap) -> bool


  Set new translation list.
  
  @param segstart: start address of the segment to add translation to
                   (C++: ea_t)
  @param transmap: vector of segment start addresses for the translation
                   list. If transmap is empty, the translation list is
                   deleted. (C++: const  eavec_t  &)
  """
  return _ida_segment.set_segment_translations(*args)

def del_segment_translations(*args):
  """
  del_segment_translations(segstart)


  Delete the translation list
  
  @param segstart: start address of the segment to delete translation
                   list (C++: ea_t)
  """
  return _ida_segment.del_segment_translations(*args)

def get_segment_translations(*args):
  """
  get_segment_translations(transmap, segstart) -> ssize_t


  Get segment translation list.
  
  @param transmap: vector of segment start addresses for the translation
                   list (C++: eavec_t  *)
  @param segstart: start address of the segment to get information about
                   (C++: ea_t)
  @return: -1 if no translation list or bad segstart. otherwise returns
           size of translation list.
  """
  return _ida_segment.get_segment_translations(*args)

def get_segment_cmt(*args):
  """
  get_segment_cmt(s, repeatable) -> ssize_t


  Get segment comment.
  
  @param s: pointer to segment structure (C++: const  segment_t  *)
  @param repeatable: 0: get regular comment. 1: get repeatable comment.
                     (C++: bool)
  @return: size of comment or -1
  """
  return _ida_segment.get_segment_cmt(*args)

def set_segment_cmt(*args):
  """
  set_segment_cmt(s, cmt, repeatable)


  Set segment comment.
  
  @param s: pointer to segment structure (C++: const  segment_t  *)
  @param cmt: comment string, may be multiline (with '  '). maximal size
              is 4096 bytes. Use empty str ("") to delete comment (C++:
              const char *)
  @param repeatable: 0: set regular comment. 1: set repeatable comment.
                     (C++: bool)
  """
  return _ida_segment.set_segment_cmt(*args)

def std_out_segm_footer(*args):
  """
  std_out_segm_footer(ctx, seg)


  Generate segment footer line as a comment line. This function may be
  used in IDP modules to generate segment footer if the target assembler
  doesn't have 'ends' directive.
  
  @param ctx (C++: struct  outctx_t  &)
  @param seg (C++: segment_t  *)
  """
  return _ida_segment.std_out_segm_footer(*args)

def set_segm_name(*args):
  """
  set_segm_name(s, name, flags=0) -> int


  Rename segment. The new name is validated (see validate_name). A
  segment always has a name. If you hadn't specified a name, the kernel
  will assign it "seg###" name where ### is segment number.
  
  @param s: pointer to segment (may be NULL) (C++: segment_t  *)
  @param name: new segment name (C++: const char *)
  @param flags: ADDSEG_IDBENC or 0 (C++: int)
  """
  return _ida_segment.set_segm_name(*args)

def get_segm_name(*args):
  """
  get_segm_name(s, flags=0) -> ssize_t


  Get true segment name by pointer to segment.
  
  @param s: pointer to segment (C++: const  segment_t  *)
  @param flags: 0-return name as is; 1-substitute bad symbols with _ 1
                corresponds to GN_VISIBLE (C++: int)
  @return: size of segment name (-1 if s==NULL)
  """
  return _ida_segment.get_segm_name(*args)

def get_visible_segm_name(*args):
  """
  get_visible_segm_name(s) -> ssize_t


  Get segment name by pointer to segment.
  
  @param s: pointer to segment (C++: const  segment_t  *)
  @return: size of segment name (-1 if s==NULL)
  """
  return _ida_segment.get_visible_segm_name(*args)

def get_segm_class(*args):
  """
  get_segm_class(s) -> ssize_t


  Get segment class. Segment class is arbitrary text (max 8 characters).
  
  @param s: pointer to segment (C++: const  segment_t  *)
  @return: size of segment class (-1 if s==NULL or bufsize<=0)
  """
  return _ida_segment.get_segm_class(*args)

def set_segm_class(*args):
  """
  set_segm_class(s, sclass, flags=0) -> int


  Set segment class.
  
  @param s: pointer to segment (may be NULL) (C++: segment_t  *)
  @param sclass: segment class (may be NULL). If segment type is
                 SEG_NORM  and segment class is one of predefined names,
                 then segment type is changed to:   "CODE" ->  SEG_CODE
                 "DATA" ->  SEG_DATA   "STACK" ->  SEG_BSS   "BSS" ->
                 SEG_BSS   if "UNK" then segment type is reset to
                 SEG_NORM . (C++: const char *)
  @param flags (C++: int)
  """
  return _ida_segment.set_segm_class(*args)

def segtype(*args):
  """
  segtype(ea) -> uchar


  Get segment type.
  
  @param ea: any linear address within the segment (C++: ea_t)
  @return: Segment types ,  SEG_UNDF  if no segment found at 'ea'
  """
  return _ida_segment.segtype(*args)

def get_segment_alignment(*args):
  """
  get_segment_alignment(align) -> char const *


  Get text representation of segment alignment code.
  
  @param align (C++: uchar)
  @return: text digestable by IBM PC assembler.
  """
  return _ida_segment.get_segment_alignment(*args)

def get_segment_combination(*args):
  """
  get_segment_combination(comb) -> char const *


  Get text representation of segment combination code.
  
  @param comb (C++: uchar)
  @return: text digestable by IBM PC assembler.
  """
  return _ida_segment.get_segment_combination(*args)

def get_segm_para(*args):
  """
  get_segm_para(s) -> ea_t


  Get segment base paragraph. Segment base paragraph may be converted to
  segment base linear address using 'to_ea()' function. In fact,
  to_ea(get_segm_para(s), 0) == get_segm_base(s).
  
  @param s: pointer to segment (C++: const  segment_t  *)
  @return: 0 if s == NULL, the segment base paragraph
  """
  return _ida_segment.get_segm_para(*args)

def get_segm_base(*args):
  """
  get_segm_base(s) -> ea_t


  Get segment base linear address. Segment base linear address is used
  to calculate virtual addresses. The virtual address of the first byte
  of the segment will be (start address of segment - segment base linear
  address)
  
  @param s: pointer to segment (C++: const  segment_t  *)
  @return: 0 if s == NULL, otherwise segment base linear address
  """
  return _ida_segment.get_segm_base(*args)

def set_segm_addressing(*args):
  """
  set_segm_addressing(s, bitness) -> bool


  Change segment addressing mode (16, 32, 64 bits). You must use this
  function to change segment addressing, never change the 'bitness'
  field directly. This function will delete all instructions, comments
  and names in the segment
  
  @param s: pointer to segment (C++: segment_t  *)
  @param bitness: new addressing mode of segment   2: 64bit segment   1:
                  32bit segment   0: 16bit segment (C++: size_t)
  @return: success
  """
  return _ida_segment.set_segm_addressing(*args)

def update_segm(*args):
  """
  update_segm(s) -> bool
  """
  return _ida_segment.update_segm(*args)

def segm_adjust_diff(*args):
  """
  segm_adjust_diff(s, delta) -> adiff_t


  Truncate and sign extend a delta depending on the segment.
  
  
  @param s (C++: const  segment_t  *)
  @param delta (C++: adiff_t)
  """
  return _ida_segment.segm_adjust_diff(*args)

def segm_adjust_ea(*args):
  """
  segm_adjust_ea(s, ea) -> ea_t


  Truncate an address depending on the segment.
  
  
  @param s (C++: const  segment_t  *)
  @param ea (C++: ea_t)
  """
  return _ida_segment.segm_adjust_ea(*args)

def get_defsr(*args):
  """
  get_defsr(s, reg) -> sel_t
  """
  return _ida_segment.get_defsr(*args)

def set_defsr(*args):
  """
  set_defsr(s, reg, value)
  """
  return _ida_segment.set_defsr(*args)

def rebase_program(*args):
  """
  rebase_program(delta, flags) -> int


  Rebase the whole program by 'delta' bytes.
  
  @param delta: number of bytes to move the program (C++: adiff_t)
  @param flags: Move segment flags  it is recommended to use
                MSF_FIXONCE  so that the loader takes care of global
                variables it stored in the database (C++: int)
  @return: Move segment result codes
  """
  return _ida_segment.rebase_program(*args)
if _BC695:
    CSS_NOAREA=CSS_NORANGE
    SEGDEL_KEEP=SEGMOD_KEEP
    SEGDEL_KEEP0=SEGMOD_KEEP0
    SEGDEL_PERM=SEGMOD_KILL
    SEGDEL_SILENT=SEGMOD_SILENT
    def del_segment_cmt(s, rpt):
        set_segment_cmt(s, "", rpt)
    ask_selector=sel2para
    # In 7.0, those were renamed
    #  - get_true_segm_name -> get_segm_name
    #  - get_segm_name -> get_visible_segm_name
    # alas, since they have the same prototypes, we cannot do much,
    # but redirect all to get_segm_name and hope for the best
    get_true_segm_name=get_segm_name



