# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: moves
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_moves', [dirname(__file__)])
        except ImportError:
            import _ida_moves
            return _ida_moves
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_moves', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_moves = swig_import_helper()
    del swig_import_helper
else:
    import _ida_moves
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

class segm_move_info_vec_t(object):
    """
    Proxy of C++ qvector<(segm_move_info_t)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> segm_move_info_vec_t
        __init__(self, x) -> segm_move_info_vec_t
        """
        this = _ida_moves.new_segm_move_info_vec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_moves.delete_segm_move_info_vec_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> segm_move_info_t
        """
        return _ida_moves.segm_move_info_vec_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_moves.segm_move_info_vec_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_moves.segm_move_info_vec_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_moves.segm_move_info_vec_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> segm_move_info_t
        """
        return _ida_moves.segm_move_info_vec_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_moves.segm_move_info_vec_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_moves.segm_move_info_vec_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_moves.segm_move_info_vec_t_resize(self, *args)

    def grow(self, *args):
        """
        grow(self, x=segm_move_info_t())
        """
        return _ida_moves.segm_move_info_vec_t_grow(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_moves.segm_move_info_vec_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_moves.segm_move_info_vec_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_moves.segm_move_info_vec_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_moves.segm_move_info_vec_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> segm_move_info_t
        """
        return _ida_moves.segm_move_info_vec_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_moves.segm_move_info_vec_t_inject(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_moves.segm_move_info_vec_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_moves.segm_move_info_vec_t___ne__(self, *args)

    def begin(self, *args):
        """
        begin(self) -> segm_move_info_t
        begin(self) -> segm_move_info_t
        """
        return _ida_moves.segm_move_info_vec_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> segm_move_info_t
        end(self) -> segm_move_info_t
        """
        return _ida_moves.segm_move_info_vec_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> segm_move_info_t
        """
        return _ida_moves.segm_move_info_vec_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> segm_move_info_t
        erase(self, first, last) -> segm_move_info_t
        """
        return _ida_moves.segm_move_info_vec_t_erase(self, *args)

    def find(self, *args):
        """
        find(self, x) -> segm_move_info_t
        find(self, x) -> segm_move_info_t
        """
        return _ida_moves.segm_move_info_vec_t_find(self, *args)

    def has(self, *args):
        """
        has(self, x) -> bool
        """
        return _ida_moves.segm_move_info_vec_t_has(self, *args)

    def add_unique(self, *args):
        """
        add_unique(self, x) -> bool
        """
        return _ida_moves.segm_move_info_vec_t_add_unique(self, *args)

    def _del(self, *args):
        """
        _del(self, x) -> bool
        """
        return _ida_moves.segm_move_info_vec_t__del(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_moves.segm_move_info_vec_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> segm_move_info_t
        """
        return _ida_moves.segm_move_info_vec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_moves.segm_move_info_vec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

segm_move_info_vec_t_swigregister = _ida_moves.segm_move_info_vec_t_swigregister
segm_move_info_vec_t_swigregister(segm_move_info_vec_t)

class graph_location_info_t(object):
    """
    Proxy of C++ graph_location_info_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    zoom = _swig_property(_ida_moves.graph_location_info_t_zoom_get, _ida_moves.graph_location_info_t_zoom_set)
    orgx = _swig_property(_ida_moves.graph_location_info_t_orgx_get, _ida_moves.graph_location_info_t_orgx_set)
    orgy = _swig_property(_ida_moves.graph_location_info_t_orgy_get, _ida_moves.graph_location_info_t_orgy_set)
    def __init__(self, *args):
        """
        __init__(self) -> graph_location_info_t
        """
        this = _ida_moves.new_graph_location_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_moves.graph_location_info_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_moves.graph_location_info_t___ne__(self, *args)

    __swig_destroy__ = _ida_moves.delete_graph_location_info_t
    __del__ = lambda self : None;
graph_location_info_t_swigregister = _ida_moves.graph_location_info_t_swigregister
graph_location_info_t_swigregister(graph_location_info_t)

class segm_move_info_t(object):
    """
    Proxy of C++ segm_move_info_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self, _from=0, _to=0, _sz=0) -> segm_move_info_t
        """
        this = _ida_moves.new_segm_move_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    _from = _swig_property(_ida_moves.segm_move_info_t__from_get, _ida_moves.segm_move_info_t__from_set)
    to = _swig_property(_ida_moves.segm_move_info_t_to_get, _ida_moves.segm_move_info_t_to_set)
    size = _swig_property(_ida_moves.segm_move_info_t_size_get, _ida_moves.segm_move_info_t_size_set)
    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_moves.segm_move_info_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_moves.segm_move_info_t___ne__(self, *args)

    __swig_destroy__ = _ida_moves.delete_segm_move_info_t
    __del__ = lambda self : None;
segm_move_info_t_swigregister = _ida_moves.segm_move_info_t_swigregister
segm_move_info_t_swigregister(segm_move_info_t)

class segm_move_infos_t(segm_move_info_vec_t):
    """
    Proxy of C++ segm_move_infos_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def find(self, *args):
        """
        find(self, ea) -> segm_move_info_t
        """
        return _ida_moves.segm_move_infos_t_find(self, *args)

    def __init__(self, *args):
        """
        __init__(self) -> segm_move_infos_t
        """
        this = _ida_moves.new_segm_move_infos_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_moves.delete_segm_move_infos_t
    __del__ = lambda self : None;
segm_move_infos_t_swigregister = _ida_moves.segm_move_infos_t_swigregister
segm_move_infos_t_swigregister(segm_move_infos_t)

class renderer_info_pos_t(object):
    """
    Proxy of C++ renderer_info_pos_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    node = _swig_property(_ida_moves.renderer_info_pos_t_node_get, _ida_moves.renderer_info_pos_t_node_set)
    cx = _swig_property(_ida_moves.renderer_info_pos_t_cx_get, _ida_moves.renderer_info_pos_t_cx_set)
    cy = _swig_property(_ida_moves.renderer_info_pos_t_cy_get, _ida_moves.renderer_info_pos_t_cy_set)
    def __init__(self, *args):
        """
        __init__(self) -> renderer_info_pos_t
        """
        this = _ida_moves.new_renderer_info_pos_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_moves.renderer_info_pos_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_moves.renderer_info_pos_t___ne__(self, *args)

    __swig_destroy__ = _ida_moves.delete_renderer_info_pos_t
    __del__ = lambda self : None;
renderer_info_pos_t_swigregister = _ida_moves.renderer_info_pos_t_swigregister
renderer_info_pos_t_swigregister(renderer_info_pos_t)

class renderer_info_t(object):
    """
    Proxy of C++ renderer_info_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> renderer_info_t
        """
        this = _ida_moves.new_renderer_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    gli = _swig_property(_ida_moves.renderer_info_t_gli_get, _ida_moves.renderer_info_t_gli_set)
    pos = _swig_property(_ida_moves.renderer_info_t_pos_get, _ida_moves.renderer_info_t_pos_set)
    rtype = _swig_property(_ida_moves.renderer_info_t_rtype_get, _ida_moves.renderer_info_t_rtype_set)
    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_moves.renderer_info_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_moves.renderer_info_t___ne__(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_moves.renderer_info_t_clear(self, *args)

    __swig_destroy__ = _ida_moves.delete_renderer_info_t
    __del__ = lambda self : None;
renderer_info_t_swigregister = _ida_moves.renderer_info_t_swigregister
renderer_info_t_swigregister(renderer_info_t)

LSEF_PLACE = _ida_moves.LSEF_PLACE
LSEF_RINFO = _ida_moves.LSEF_RINFO
LSEF_PTYPE = _ida_moves.LSEF_PTYPE
LSEF_ALL = _ida_moves.LSEF_ALL
class lochist_entry_t(object):
    """
    Proxy of C++ lochist_entry_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    rinfo = _swig_property(_ida_moves.lochist_entry_t_rinfo_get, _ida_moves.lochist_entry_t_rinfo_set)
    plce = _swig_property(_ida_moves.lochist_entry_t_plce_get, _ida_moves.lochist_entry_t_plce_set)
    def __init__(self, *args):
        """
        __init__(self) -> lochist_entry_t
        __init__(self, p, r) -> lochist_entry_t
        __init__(self, other) -> lochist_entry_t
        """
        this = _ida_moves.new_lochist_entry_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_moves.delete_lochist_entry_t
    __del__ = lambda self : None;
    def renderer_info(self, *args):
        """
        renderer_info(self) -> renderer_info_t
        renderer_info(self) -> renderer_info_t
        """
        return _ida_moves.lochist_entry_t_renderer_info(self, *args)

    def place(self, *args):
        """
        place(self) -> place_t
        place(self) -> place_t
        """
        return _ida_moves.lochist_entry_t_place(self, *args)

    def set_place(self, *args):
        """
        set_place(self, p)
        """
        return _ida_moves.lochist_entry_t_set_place(self, *args)

    def is_valid(self, *args):
        """
        is_valid(self) -> bool
        """
        return _ida_moves.lochist_entry_t_is_valid(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_moves.lochist_entry_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_moves.lochist_entry_t___ne__(self, *args)

    def acquire_place(self, *args):
        """
        acquire_place(self, p)
        """
        return _ida_moves.lochist_entry_t_acquire_place(self, *args)

lochist_entry_t_swigregister = _ida_moves.lochist_entry_t_swigregister
lochist_entry_t_swigregister(lochist_entry_t)

UNHID_SEGM = _ida_moves.UNHID_SEGM
UNHID_FUNC = _ida_moves.UNHID_FUNC
UNHID_RANGE = _ida_moves.UNHID_RANGE
DEFAULT_CURSOR_Y = _ida_moves.DEFAULT_CURSOR_Y
DEFAULT_LNNUM = _ida_moves.DEFAULT_LNNUM
CURLOC_LIST = _ida_moves.CURLOC_LIST
MAX_MARK_SLOT = _ida_moves.MAX_MARK_SLOT
class lochist_t(object):
    """
    Proxy of C++ lochist_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> lochist_t
        """
        this = _ida_moves.new_lochist_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_moves.delete_lochist_t
    __del__ = lambda self : None;
    def is_history_enabled(self, *args):
        """
        is_history_enabled(self) -> bool
        """
        return _ida_moves.lochist_t_is_history_enabled(self, *args)

    def get_place_id(self, *args):
        """
        get_place_id(self) -> int
        """
        return _ida_moves.lochist_t_get_place_id(self, *args)

    def init(self, *args):
        """
        init(self, stream_name, _defpos, _ud, _flags) -> bool
        """
        return _ida_moves.lochist_t_init(self, *args)

    def netcode(self, *args):
        """
        netcode(self) -> nodeidx_t
        """
        return _ida_moves.lochist_t_netcode(self, *args)

    def jump(self, *args):
        """
        jump(self, try_to_unhide, e)
        """
        return _ida_moves.lochist_t_jump(self, *args)

    def current_index(self, *args):
        """
        current_index(self) -> uint32
        """
        return _ida_moves.lochist_t_current_index(self, *args)

    def seek(self, *args):
        """
        seek(self, index, try_to_unhide) -> bool
        """
        return _ida_moves.lochist_t_seek(self, *args)

    def fwd(self, *args):
        """
        fwd(self, cnt, try_to_unhide) -> bool
        """
        return _ida_moves.lochist_t_fwd(self, *args)

    def back(self, *args):
        """
        back(self, cnt, try_to_unhide) -> bool
        """
        return _ida_moves.lochist_t_back(self, *args)

    def save(self, *args):
        """
        save(self)
        """
        return _ida_moves.lochist_t_save(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_moves.lochist_t_clear(self, *args)

    def get_current(self, *args):
        """
        get_current(self) -> lochist_entry_t
        """
        return _ida_moves.lochist_t_get_current(self, *args)

    def set_current(self, *args):
        """
        set_current(self, e)
        """
        return _ida_moves.lochist_t_set_current(self, *args)

    def set(self, *args):
        """
        set(self, index, e)
        """
        return _ida_moves.lochist_t_set(self, *args)

    def get(self, *args):
        """
        get(self, out, index) -> bool
        """
        return _ida_moves.lochist_t_get(self, *args)

    def size(self, *args):
        """
        size(self) -> uint32
        """
        return _ida_moves.lochist_t_size(self, *args)

    def get_template_place(self, *args):
        """
        get_template_place(self) -> place_t
        """
        return _ida_moves.lochist_t_get_template_place(self, *args)

lochist_t_swigregister = _ida_moves.lochist_t_swigregister
lochist_t_swigregister(lochist_t)

class bookmarks_t(object):
    """
    Proxy of C++ bookmarks_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def mark(*args):
        """
        mark(e, index, title, desc, ud) -> uint32
        """
        return _ida_moves.bookmarks_t_mark(*args)

    mark = staticmethod(mark)
    def get(*args):
        """
        get(out_entry, out_desc, index, ud) -> bool
        """
        return _ida_moves.bookmarks_t_get(*args)

    get = staticmethod(get)
    def get_desc(*args):
        """
        get_desc(e, index, ud) -> bool
        """
        return _ida_moves.bookmarks_t_get_desc(*args)

    get_desc = staticmethod(get_desc)
    def find_index(*args):
        """
        find_index(e, ud) -> uint32
        """
        return _ida_moves.bookmarks_t_find_index(*args)

    find_index = staticmethod(find_index)
    def size(*args):
        """
        size(e, ud) -> uint32
        """
        return _ida_moves.bookmarks_t_size(*args)

    size = staticmethod(size)
    def erase(*args):
        """
        erase(e, index, ud) -> bool
        """
        return _ida_moves.bookmarks_t_erase(*args)

    erase = staticmethod(erase)
bookmarks_t_swigregister = _ida_moves.bookmarks_t_swigregister
bookmarks_t_swigregister(bookmarks_t)

def bookmarks_t_mark(*args):
  """
  bookmarks_t_mark(e, index, title, desc, ud) -> uint32
  """
  return _ida_moves.bookmarks_t_mark(*args)

def bookmarks_t_get(*args):
  """
  bookmarks_t_get(out_entry, out_desc, index, ud) -> bool
  """
  return _ida_moves.bookmarks_t_get(*args)

def bookmarks_t_get_desc(*args):
  """
  bookmarks_t_get_desc(e, index, ud) -> bool
  """
  return _ida_moves.bookmarks_t_get_desc(*args)

def bookmarks_t_find_index(*args):
  """
  bookmarks_t_find_index(e, ud) -> uint32
  """
  return _ida_moves.bookmarks_t_find_index(*args)

def bookmarks_t_size(*args):
  """
  bookmarks_t_size(e, ud) -> uint32
  """
  return _ida_moves.bookmarks_t_size(*args)

def bookmarks_t_erase(*args):
  """
  bookmarks_t_erase(e, index, ud) -> bool
  """
  return _ida_moves.bookmarks_t_erase(*args)


