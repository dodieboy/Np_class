# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: pro
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_pro', [dirname(__file__)])
        except ImportError:
            import _ida_pro
            return _ida_pro
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_pro', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_pro = swig_import_helper()
    del swig_import_helper
else:
    import _ida_pro
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

IDA_SDK_VERSION = _ida_pro.IDA_SDK_VERSION
"""
IDA SDK v7.3.
"""
BADMEMSIZE = _ida_pro.BADMEMSIZE
MAXSTR = _ida_pro.MAXSTR
"""
maximum string size
"""
__MF__ = _ida_pro.__MF__
"""
byte sex of our platform (Most significant byte First). 0: little
endian (Intel 80x86). 1: big endian (PowerPC).
"""

def qatoll(*args):
  """
  qatoll(nptr) -> int64
  """
  return _ida_pro.qatoll(*args)
FMT_64 = _ida_pro.FMT_64
FMT_Z = _ida_pro.FMT_Z
FMT_ZS = _ida_pro.FMT_ZS
FMT_EA = _ida_pro.FMT_EA

def qexit(*args):
  """
  qexit(code)


  Call qatexit functions, shut down UI and kernel, and exit.
  
  @param code: exit code (C++: int)
  """
  return _ida_pro.qexit(*args)

def set_bits(*args):
  """
  set_bits(bitmap, low, high)


  Set bits between [low, high) in 'bitmap'.
  
  
  @param bitmap (C++: uchar  *)
  @param low (C++: size_t)
  @param high (C++: size_t)
  """
  return _ida_pro.set_bits(*args)

def clear_bits(*args):
  """
  clear_bits(bitmap, low, high)


  Clear bits between [low, high) in 'bitmap'.
  
  
  @param bitmap (C++: uchar  *)
  @param low (C++: size_t)
  @param high (C++: size_t)
  """
  return _ida_pro.clear_bits(*args)

def log2ceil(*args):
  """
  log2ceil(d64) -> int


  calculate ceil(log2(d64)) or floor(log2(d64)), it returns 0 if d64 ==
  0
  
  @param d64 (C++: uint64)
  """
  return _ida_pro.log2ceil(*args)

def log2floor(*args):
  """
  log2floor(d64) -> int
  """
  return _ida_pro.log2floor(*args)

def extend_sign(*args):
  """
  extend_sign(v, nbytes, sign_extend) -> uint64


  Sign-, or zero-extend the value 'v' to occupy 64 bits. The value 'v'
  is considered to be of size 'nbytes'.
  
  @param v (C++: uint64)
  @param nbytes (C++: int)
  @param sign_extend (C++: bool)
  """
  return _ida_pro.extend_sign(*args)

def readbytes(*args):
  """
  readbytes(h, res, size, mf) -> int


  Read at most 4 bytes from file.
  
  @param h: file handle (C++: int)
  @param res: value read from file (C++: uint32  *)
  @param size: size of value in bytes (1,2,4) (C++: int)
  @param mf: is MSB first? (C++: bool)
  @return: 0 on success, nonzero otherwise
  """
  return _ida_pro.readbytes(*args)

def writebytes(*args):
  """
  writebytes(h, l, size, mf) -> int


  Write at most 4 bytes to file.
  
  @param h: file handle (C++: int)
  @param l: value to write (C++: uint32)
  @param size: size of value in bytes (1,2,4) (C++: int)
  @param mf: is MSB first? (C++: bool)
  @return: 0 on success, nonzero otherwise
  """
  return _ida_pro.writebytes(*args)

def reloc_value(*args):
  """
  reloc_value(value, size, delta, mf)
  """
  return _ida_pro.reloc_value(*args)

def qvector_reserve(*args):
  """
  qvector_reserve(vec, old, cnt, elsize) -> void *


  Change capacity of given qvector.
  
  @param vec: a pointer to a qvector (C++: void *)
  @param old: a pointer to the qvector's array (C++: void *)
  @param cnt: number of elements to reserve (C++: size_t)
  @param elsize: size of each element (C++: size_t)
  @return: a pointer to the newly allocated array
  """
  return _ida_pro.qvector_reserve(*args)
class qrefcnt_obj_t(object):
    """
    Proxy of C++ qrefcnt_obj_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    refcnt = _swig_property(_ida_pro.qrefcnt_obj_t_refcnt_get, _ida_pro.qrefcnt_obj_t_refcnt_set)
    def release(self, *args):
        """
        release(self)
        """
        return _ida_pro.qrefcnt_obj_t_release(self, *args)

    __swig_destroy__ = _ida_pro.delete_qrefcnt_obj_t
    __del__ = lambda self : None;
qrefcnt_obj_t_swigregister = _ida_pro.qrefcnt_obj_t_swigregister
qrefcnt_obj_t_swigregister(qrefcnt_obj_t)


def relocate_relobj(*args):
  """
  relocate_relobj(_relobj, ea, mf) -> bool
  """
  return _ida_pro.relocate_relobj(*args)
IDBDEC_ESCAPE = _ida_pro.IDBDEC_ESCAPE
"""
convert non-printable characters to C escapes (, \\xNN, \\uNNNN)
"""
CP_ACP = _ida_pro.CP_ACP
CP_OEM = _ida_pro.CP_OEM
CP_UTF8 = _ida_pro.CP_UTF8
CP_BOM = _ida_pro.CP_BOM
UTF8_BOM = _ida_pro.UTF8_BOM
UTF16LE_BOM = _ida_pro.UTF16LE_BOM
UTF16BE_BOM = _ida_pro.UTF16BE_BOM
UTF32LE_BOM = _ida_pro.UTF32LE_BOM
UTF32BE_BOM = _ida_pro.UTF32BE_BOM
CP_ELLIPSIS = _ida_pro.CP_ELLIPSIS
UTF8_ELLIPSIS = _ida_pro.UTF8_ELLIPSIS
CP_REPLCHAR = _ida_pro.CP_REPLCHAR
UTF8_REPLCHAR = _ida_pro.UTF8_REPLCHAR
MAX_UTF8_SEQ_LEN = _ida_pro.MAX_UTF8_SEQ_LEN
CEF_RETERR = _ida_pro.CEF_RETERR
ENC_WIN1252 = _ida_pro.ENC_WIN1252
ENC_UTF8 = _ida_pro.ENC_UTF8
ENC_MUTF8 = _ida_pro.ENC_MUTF8
ENC_UTF16 = _ida_pro.ENC_UTF16
ENC_UTF16LE = _ida_pro.ENC_UTF16LE
ENC_UTF16BE = _ida_pro.ENC_UTF16BE
ENC_UTF32LE = _ida_pro.ENC_UTF32LE
ENC_UTF32BE = _ida_pro.ENC_UTF32BE
CP_UTF16 = _ida_pro.CP_UTF16
"""
UTF-16 codepage.
"""
SUBSTCHAR = _ida_pro.SUBSTCHAR
"""
default char, used if a char cannot be represented in a codepage
"""
class channel_redir_t(object):
    """
    Proxy of C++ channel_redir_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fd = _swig_property(_ida_pro.channel_redir_t_fd_get, _ida_pro.channel_redir_t_fd_set)
    file = _swig_property(_ida_pro.channel_redir_t_file_get, _ida_pro.channel_redir_t_file_set)
    flags = _swig_property(_ida_pro.channel_redir_t_flags_get, _ida_pro.channel_redir_t_flags_set)
    def is_input(self, *args):
        """
        is_input(self) -> bool
        """
        return _ida_pro.channel_redir_t_is_input(self, *args)

    def is_output(self, *args):
        """
        is_output(self) -> bool
        """
        return _ida_pro.channel_redir_t_is_output(self, *args)

    def is_append(self, *args):
        """
        is_append(self) -> bool
        """
        return _ida_pro.channel_redir_t_is_append(self, *args)

    def is_quoted(self, *args):
        """
        is_quoted(self) -> bool
        """
        return _ida_pro.channel_redir_t_is_quoted(self, *args)

    start = _swig_property(_ida_pro.channel_redir_t_start_get, _ida_pro.channel_redir_t_start_set)
    length = _swig_property(_ida_pro.channel_redir_t_length_get, _ida_pro.channel_redir_t_length_set)
    def __init__(self, *args):
        """
        __init__(self) -> channel_redir_t
        """
        this = _ida_pro.new_channel_redir_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_channel_redir_t
    __del__ = lambda self : None;
channel_redir_t_swigregister = _ida_pro.channel_redir_t_swigregister
channel_redir_t_swigregister(channel_redir_t)
IOREDIR_INPUT = _ida_pro.IOREDIR_INPUT
"""
input redirection
"""
IOREDIR_OUTPUT = _ida_pro.IOREDIR_OUTPUT
"""
output redirection
"""
IOREDIR_APPEND = _ida_pro.IOREDIR_APPEND
"""
append, do not overwrite the output file
"""
IOREDIR_QUOTED = _ida_pro.IOREDIR_QUOTED
"""
the file name was quoted
"""


def quote_cmdline_arg(*args):
  """
  quote_cmdline_arg(arg) -> bool


  Quote a command line argument if it contains escape characters. For
  example, *.c will be converted into "*.c" because * may be
  inadvertently expanded by the shell
  
  @param arg (C++: qstring  *)
  @return: true: modified 'arg'
  """
  return _ida_pro.quote_cmdline_arg(*args)
class instant_dbgopts_t(object):
    """
    Proxy of C++ instant_dbgopts_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    debmod = _swig_property(_ida_pro.instant_dbgopts_t_debmod_get, _ida_pro.instant_dbgopts_t_debmod_set)
    env = _swig_property(_ida_pro.instant_dbgopts_t_env_get, _ida_pro.instant_dbgopts_t_env_set)
    host = _swig_property(_ida_pro.instant_dbgopts_t_host_get, _ida_pro.instant_dbgopts_t_host_set)
    _pass = _swig_property(_ida_pro.instant_dbgopts_t__pass_get, _ida_pro.instant_dbgopts_t__pass_set)
    port = _swig_property(_ida_pro.instant_dbgopts_t_port_get, _ida_pro.instant_dbgopts_t_port_set)
    pid = _swig_property(_ida_pro.instant_dbgopts_t_pid_get, _ida_pro.instant_dbgopts_t_pid_set)
    event_id = _swig_property(_ida_pro.instant_dbgopts_t_event_id_get, _ida_pro.instant_dbgopts_t_event_id_set)
    attach = _swig_property(_ida_pro.instant_dbgopts_t_attach_get, _ida_pro.instant_dbgopts_t_attach_set)
    def __init__(self, *args):
        """
        __init__(self) -> instant_dbgopts_t
        """
        this = _ida_pro.new_instant_dbgopts_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_instant_dbgopts_t
    __del__ = lambda self : None;
instant_dbgopts_t_swigregister = _ida_pro.instant_dbgopts_t_swigregister
instant_dbgopts_t_swigregister(instant_dbgopts_t)


def parse_dbgopts(*args):
  """
  parse_dbgopts(ido, r_switch) -> bool


  Parse the -r command line switch (for instant debugging). r_switch
  points to the value of the -r switch. Example: win32@localhost+
  
  @param ido (C++: struct  instant_dbgopts_t  *)
  @param r_switch (C++: const char *)
  @return: true-ok, false-parse error
  """
  return _ida_pro.parse_dbgopts(*args)

def check_process_exit(*args):
  """
  check_process_exit(handle, exit_code, msecs=-1) -> int


  Check whether process has terminated or not.
  
  @param handle: process handle to wait for (C++: void *)
  @param exit_code: pointer to the buffer for the exit code (C++: int *)
  """
  return _ida_pro.check_process_exit(*args)
TCT_UNKNOWN = _ida_pro.TCT_UNKNOWN
TCT_OWNER = _ida_pro.TCT_OWNER
TCT_NOT_OWNER = _ida_pro.TCT_NOT_OWNER

def is_control_tty(*args):
  """
  is_control_tty(fd) -> enum tty_control_t


  Check if the current process is the owner of the TTY specified by 'fd'
  (typically an opened descriptor to /dev/tty).
  
  @param fd (C++: int)
  """
  return _ida_pro.is_control_tty(*args)

def qdetach_tty(*args):
  """
  qdetach_tty()


  If the current terminal is the controlling terminal of the calling
  process, give up this controlling terminal.The current terminal is
  supposed to be /dev/tty
  """
  return _ida_pro.qdetach_tty(*args)

def qcontrol_tty(*args):
  """
  qcontrol_tty()


  Make the current terminal the controlling terminal of the calling
  process.The current terminal is supposed to be /dev/tty
  """
  return _ida_pro.qcontrol_tty(*args)
class __qthread_t(object):
    """
    Proxy of C++ __qthread_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> __qthread_t
        """
        this = _ida_pro.new___qthread_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete___qthread_t
    __del__ = lambda self : None;
__qthread_t_swigregister = _ida_pro.__qthread_t_swigregister
__qthread_t_swigregister(__qthread_t)


def is_main_thread(*args):
  """
  is_main_thread() -> bool


  Are we running in the main thread?
  """
  return _ida_pro.is_main_thread(*args)
class __qsemaphore_t(object):
    """
    Proxy of C++ __qsemaphore_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> __qsemaphore_t
        """
        this = _ida_pro.new___qsemaphore_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete___qsemaphore_t
    __del__ = lambda self : None;
__qsemaphore_t_swigregister = _ida_pro.__qsemaphore_t_swigregister
__qsemaphore_t_swigregister(__qsemaphore_t)

class __qmutex_t(object):
    """
    Proxy of C++ __qmutex_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> __qmutex_t
        """
        this = _ida_pro.new___qmutex_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete___qmutex_t
    __del__ = lambda self : None;
__qmutex_t_swigregister = _ida_pro.__qmutex_t_swigregister
__qmutex_t_swigregister(__qmutex_t)

class qmutex_locker_t(object):
    """
    Proxy of C++ qmutex_locker_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self, _lock) -> qmutex_locker_t
        """
        this = _ida_pro.new_qmutex_locker_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_qmutex_locker_t
    __del__ = lambda self : None;
qmutex_locker_t_swigregister = _ida_pro.qmutex_locker_t_swigregister
qmutex_locker_t_swigregister(qmutex_locker_t)

class intvec_t(object):
    """
    Proxy of C++ qvector<(int)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> intvec_t
        __init__(self, x) -> intvec_t
        """
        this = _ida_pro.new_intvec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_intvec_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> int &
        """
        return _ida_pro.intvec_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_pro.intvec_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_pro.intvec_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_pro.intvec_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> int const &
        """
        return _ida_pro.intvec_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_pro.intvec_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_pro.intvec_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_pro.intvec_t_resize(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_pro.intvec_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_pro.intvec_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_pro.intvec_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_pro.intvec_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> int *
        """
        return _ida_pro.intvec_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_pro.intvec_t_inject(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_pro.intvec_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_pro.intvec_t___ne__(self, *args)

    def begin(self, *args):
        """
        begin(self) -> qvector< int >::iterator
        begin(self) -> qvector< int >::const_iterator
        """
        return _ida_pro.intvec_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> qvector< int >::iterator
        end(self) -> qvector< int >::const_iterator
        """
        return _ida_pro.intvec_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> qvector< int >::iterator
        """
        return _ida_pro.intvec_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> qvector< int >::iterator
        erase(self, first, last) -> qvector< int >::iterator
        """
        return _ida_pro.intvec_t_erase(self, *args)

    def find(self, *args):
        """
        find(self, x) -> qvector< int >::iterator
        find(self, x) -> qvector< int >::const_iterator
        """
        return _ida_pro.intvec_t_find(self, *args)

    def has(self, *args):
        """
        has(self, x) -> bool
        """
        return _ida_pro.intvec_t_has(self, *args)

    def add_unique(self, *args):
        """
        add_unique(self, x) -> bool
        """
        return _ida_pro.intvec_t_add_unique(self, *args)

    def _del(self, *args):
        """
        _del(self, x) -> bool
        """
        return _ida_pro.intvec_t__del(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_pro.intvec_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> int const &
        """
        return _ida_pro.intvec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_pro.intvec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

intvec_t_swigregister = _ida_pro.intvec_t_swigregister
intvec_t_swigregister(intvec_t)

class uintvec_t(object):
    """
    Proxy of C++ qvector<(unsigned int)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> uintvec_t
        __init__(self, x) -> uintvec_t
        """
        this = _ida_pro.new_uintvec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_uintvec_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> unsigned int &
        """
        return _ida_pro.uintvec_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_pro.uintvec_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_pro.uintvec_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_pro.uintvec_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> unsigned int const &
        """
        return _ida_pro.uintvec_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_pro.uintvec_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_pro.uintvec_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_pro.uintvec_t_resize(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_pro.uintvec_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_pro.uintvec_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_pro.uintvec_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_pro.uintvec_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> unsigned int *
        """
        return _ida_pro.uintvec_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_pro.uintvec_t_inject(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_pro.uintvec_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_pro.uintvec_t___ne__(self, *args)

    def begin(self, *args):
        """
        begin(self) -> qvector< unsigned int >::iterator
        begin(self) -> qvector< unsigned int >::const_iterator
        """
        return _ida_pro.uintvec_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> qvector< unsigned int >::iterator
        end(self) -> qvector< unsigned int >::const_iterator
        """
        return _ida_pro.uintvec_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> qvector< unsigned int >::iterator
        """
        return _ida_pro.uintvec_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> qvector< unsigned int >::iterator
        erase(self, first, last) -> qvector< unsigned int >::iterator
        """
        return _ida_pro.uintvec_t_erase(self, *args)

    def find(self, *args):
        """
        find(self, x) -> qvector< unsigned int >::iterator
        find(self, x) -> qvector< unsigned int >::const_iterator
        """
        return _ida_pro.uintvec_t_find(self, *args)

    def has(self, *args):
        """
        has(self, x) -> bool
        """
        return _ida_pro.uintvec_t_has(self, *args)

    def add_unique(self, *args):
        """
        add_unique(self, x) -> bool
        """
        return _ida_pro.uintvec_t_add_unique(self, *args)

    def _del(self, *args):
        """
        _del(self, x) -> bool
        """
        return _ida_pro.uintvec_t__del(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_pro.uintvec_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> unsigned int const &
        """
        return _ida_pro.uintvec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_pro.uintvec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

uintvec_t_swigregister = _ida_pro.uintvec_t_swigregister
uintvec_t_swigregister(uintvec_t)

class longlongvec_t(object):
    """
    Proxy of C++ qvector<(long long)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> longlongvec_t
        __init__(self, x) -> longlongvec_t
        """
        this = _ida_pro.new_longlongvec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_longlongvec_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> long long &
        """
        return _ida_pro.longlongvec_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_pro.longlongvec_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_pro.longlongvec_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_pro.longlongvec_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> long long const &
        """
        return _ida_pro.longlongvec_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_pro.longlongvec_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_pro.longlongvec_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_pro.longlongvec_t_resize(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_pro.longlongvec_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_pro.longlongvec_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_pro.longlongvec_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_pro.longlongvec_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> long long *
        """
        return _ida_pro.longlongvec_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_pro.longlongvec_t_inject(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_pro.longlongvec_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_pro.longlongvec_t___ne__(self, *args)

    def begin(self, *args):
        """
        begin(self) -> qvector< long long >::iterator
        begin(self) -> qvector< long long >::const_iterator
        """
        return _ida_pro.longlongvec_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> qvector< long long >::iterator
        end(self) -> qvector< long long >::const_iterator
        """
        return _ida_pro.longlongvec_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> qvector< long long >::iterator
        """
        return _ida_pro.longlongvec_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> qvector< long long >::iterator
        erase(self, first, last) -> qvector< long long >::iterator
        """
        return _ida_pro.longlongvec_t_erase(self, *args)

    def find(self, *args):
        """
        find(self, x) -> qvector< long long >::iterator
        find(self, x) -> qvector< long long >::const_iterator
        """
        return _ida_pro.longlongvec_t_find(self, *args)

    def has(self, *args):
        """
        has(self, x) -> bool
        """
        return _ida_pro.longlongvec_t_has(self, *args)

    def add_unique(self, *args):
        """
        add_unique(self, x) -> bool
        """
        return _ida_pro.longlongvec_t_add_unique(self, *args)

    def _del(self, *args):
        """
        _del(self, x) -> bool
        """
        return _ida_pro.longlongvec_t__del(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_pro.longlongvec_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> long long const &
        """
        return _ida_pro.longlongvec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_pro.longlongvec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

longlongvec_t_swigregister = _ida_pro.longlongvec_t_swigregister
longlongvec_t_swigregister(longlongvec_t)

class ulonglongvec_t(object):
    """
    Proxy of C++ qvector<(unsigned long long)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> ulonglongvec_t
        __init__(self, x) -> ulonglongvec_t
        """
        this = _ida_pro.new_ulonglongvec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_ulonglongvec_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> unsigned long long &
        """
        return _ida_pro.ulonglongvec_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_pro.ulonglongvec_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_pro.ulonglongvec_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_pro.ulonglongvec_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> unsigned long long const &
        """
        return _ida_pro.ulonglongvec_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_pro.ulonglongvec_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_pro.ulonglongvec_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_pro.ulonglongvec_t_resize(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_pro.ulonglongvec_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_pro.ulonglongvec_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_pro.ulonglongvec_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_pro.ulonglongvec_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> unsigned long long *
        """
        return _ida_pro.ulonglongvec_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_pro.ulonglongvec_t_inject(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_pro.ulonglongvec_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_pro.ulonglongvec_t___ne__(self, *args)

    def begin(self, *args):
        """
        begin(self) -> qvector< unsigned long long >::iterator
        begin(self) -> qvector< unsigned long long >::const_iterator
        """
        return _ida_pro.ulonglongvec_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> qvector< unsigned long long >::iterator
        end(self) -> qvector< unsigned long long >::const_iterator
        """
        return _ida_pro.ulonglongvec_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> qvector< unsigned long long >::iterator
        """
        return _ida_pro.ulonglongvec_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> qvector< unsigned long long >::iterator
        erase(self, first, last) -> qvector< unsigned long long >::iterator
        """
        return _ida_pro.ulonglongvec_t_erase(self, *args)

    def find(self, *args):
        """
        find(self, x) -> qvector< unsigned long long >::iterator
        find(self, x) -> qvector< unsigned long long >::const_iterator
        """
        return _ida_pro.ulonglongvec_t_find(self, *args)

    def has(self, *args):
        """
        has(self, x) -> bool
        """
        return _ida_pro.ulonglongvec_t_has(self, *args)

    def add_unique(self, *args):
        """
        add_unique(self, x) -> bool
        """
        return _ida_pro.ulonglongvec_t_add_unique(self, *args)

    def _del(self, *args):
        """
        _del(self, x) -> bool
        """
        return _ida_pro.ulonglongvec_t__del(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_pro.ulonglongvec_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> unsigned long long const &
        """
        return _ida_pro.ulonglongvec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_pro.ulonglongvec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

ulonglongvec_t_swigregister = _ida_pro.ulonglongvec_t_swigregister
ulonglongvec_t_swigregister(ulonglongvec_t)

class boolvec_t(object):
    """
    Proxy of C++ qvector<(bool)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> boolvec_t
        __init__(self, x) -> boolvec_t
        """
        this = _ida_pro.new_boolvec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_boolvec_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> bool &
        """
        return _ida_pro.boolvec_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_pro.boolvec_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_pro.boolvec_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_pro.boolvec_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> bool const &
        """
        return _ida_pro.boolvec_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_pro.boolvec_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_pro.boolvec_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_pro.boolvec_t_resize(self, *args)

    def grow(self, *args):
        """
        grow(self, x=bool())
        """
        return _ida_pro.boolvec_t_grow(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_pro.boolvec_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_pro.boolvec_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_pro.boolvec_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_pro.boolvec_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> bool *
        """
        return _ida_pro.boolvec_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_pro.boolvec_t_inject(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_pro.boolvec_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_pro.boolvec_t___ne__(self, *args)

    def begin(self, *args):
        """
        begin(self) -> qvector< bool >::iterator
        begin(self) -> qvector< bool >::const_iterator
        """
        return _ida_pro.boolvec_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> qvector< bool >::iterator
        end(self) -> qvector< bool >::const_iterator
        """
        return _ida_pro.boolvec_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> qvector< bool >::iterator
        """
        return _ida_pro.boolvec_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> qvector< bool >::iterator
        erase(self, first, last) -> qvector< bool >::iterator
        """
        return _ida_pro.boolvec_t_erase(self, *args)

    def find(self, *args):
        """
        find(self, x) -> qvector< bool >::iterator
        find(self, x) -> qvector< bool >::const_iterator
        """
        return _ida_pro.boolvec_t_find(self, *args)

    def has(self, *args):
        """
        has(self, x) -> bool
        """
        return _ida_pro.boolvec_t_has(self, *args)

    def add_unique(self, *args):
        """
        add_unique(self, x) -> bool
        """
        return _ida_pro.boolvec_t_add_unique(self, *args)

    def _del(self, *args):
        """
        _del(self, x) -> bool
        """
        return _ida_pro.boolvec_t__del(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_pro.boolvec_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> bool const &
        """
        return _ida_pro.boolvec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_pro.boolvec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

boolvec_t_swigregister = _ida_pro.boolvec_t_swigregister
boolvec_t_swigregister(boolvec_t)

class strvec_t(object):
    """
    Proxy of C++ qvector<(simpleline_t)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> strvec_t
        __init__(self, x) -> strvec_t
        """
        this = _ida_pro.new_strvec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_strvec_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> simpleline_t &
        """
        return _ida_pro.strvec_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_pro.strvec_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_pro.strvec_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_pro.strvec_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> simpleline_t const &
        """
        return _ida_pro.strvec_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_pro.strvec_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_pro.strvec_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_pro.strvec_t_resize(self, *args)

    def grow(self, *args):
        """
        grow(self, x=simpleline_t())
        """
        return _ida_pro.strvec_t_grow(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_pro.strvec_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_pro.strvec_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_pro.strvec_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_pro.strvec_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> simpleline_t *
        """
        return _ida_pro.strvec_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_pro.strvec_t_inject(self, *args)

    def begin(self, *args):
        """
        begin(self) -> qvector< simpleline_t >::iterator
        begin(self) -> qvector< simpleline_t >::const_iterator
        """
        return _ida_pro.strvec_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> qvector< simpleline_t >::iterator
        end(self) -> qvector< simpleline_t >::const_iterator
        """
        return _ida_pro.strvec_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> qvector< simpleline_t >::iterator
        """
        return _ida_pro.strvec_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> qvector< simpleline_t >::iterator
        erase(self, first, last) -> qvector< simpleline_t >::iterator
        """
        return _ida_pro.strvec_t_erase(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_pro.strvec_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> simpleline_t const &
        """
        return _ida_pro.strvec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_pro.strvec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

strvec_t_swigregister = _ida_pro.strvec_t_swigregister
strvec_t_swigregister(strvec_t)

class sizevec_t(object):
    """
    Proxy of C++ qvector<(size_t)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> sizevec_t
        __init__(self, x) -> sizevec_t
        """
        this = _ida_pro.new_sizevec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_sizevec_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> size_t &
        """
        return _ida_pro.sizevec_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_pro.sizevec_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_pro.sizevec_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_pro.sizevec_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> size_t const &
        """
        return _ida_pro.sizevec_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_pro.sizevec_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_pro.sizevec_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_pro.sizevec_t_resize(self, *args)

    def grow(self, *args):
        """
        grow(self, x=size_t())
        """
        return _ida_pro.sizevec_t_grow(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_pro.sizevec_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_pro.sizevec_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_pro.sizevec_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_pro.sizevec_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> size_t *
        """
        return _ida_pro.sizevec_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_pro.sizevec_t_inject(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_pro.sizevec_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_pro.sizevec_t___ne__(self, *args)

    def begin(self, *args):
        """
        begin(self) -> qvector< size_t >::iterator
        begin(self) -> qvector< size_t >::const_iterator
        """
        return _ida_pro.sizevec_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> qvector< size_t >::iterator
        end(self) -> qvector< size_t >::const_iterator
        """
        return _ida_pro.sizevec_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> qvector< size_t >::iterator
        """
        return _ida_pro.sizevec_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> qvector< size_t >::iterator
        erase(self, first, last) -> qvector< size_t >::iterator
        """
        return _ida_pro.sizevec_t_erase(self, *args)

    def find(self, *args):
        """
        find(self, x) -> qvector< size_t >::iterator
        find(self, x) -> qvector< size_t >::const_iterator
        """
        return _ida_pro.sizevec_t_find(self, *args)

    def has(self, *args):
        """
        has(self, x) -> bool
        """
        return _ida_pro.sizevec_t_has(self, *args)

    def add_unique(self, *args):
        """
        add_unique(self, x) -> bool
        """
        return _ida_pro.sizevec_t_add_unique(self, *args)

    def _del(self, *args):
        """
        _del(self, x) -> bool
        """
        return _ida_pro.sizevec_t__del(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_pro.sizevec_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> size_t const &
        """
        return _ida_pro.sizevec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_pro.sizevec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

sizevec_t_swigregister = _ida_pro.sizevec_t_swigregister
sizevec_t_swigregister(sizevec_t)


def qstrvec_t_create(*args):
  """
  qstrvec_t_create() -> PyObject *
  """
  return _ida_pro.qstrvec_t_create(*args)

def qstrvec_t_destroy(*args):
  """
  qstrvec_t_destroy(py_obj) -> bool
  """
  return _ida_pro.qstrvec_t_destroy(*args)

def qstrvec_t_get_clink(*args):
  """
  qstrvec_t_get_clink(self) -> qstrvec_t *
  """
  return _ida_pro.qstrvec_t_get_clink(*args)

def qstrvec_t_get_clink_ptr(*args):
  """
  qstrvec_t_get_clink_ptr(self) -> PyObject *
  """
  return _ida_pro.qstrvec_t_get_clink_ptr(*args)

def qstrvec_t_assign(*args):
  """
  qstrvec_t_assign(self, other) -> bool
  """
  return _ida_pro.qstrvec_t_assign(*args)

def qstrvec_t_addressof(*args):
  """
  qstrvec_t_addressof(self, idx) -> PyObject *
  """
  return _ida_pro.qstrvec_t_addressof(*args)

def qstrvec_t_set(*args):
  """
  qstrvec_t_set(self, idx, s) -> bool
  """
  return _ida_pro.qstrvec_t_set(*args)

def qstrvec_t_from_list(*args):
  """
  qstrvec_t_from_list(self, py_list) -> bool
  """
  return _ida_pro.qstrvec_t_from_list(*args)

def qstrvec_t_size(*args):
  """
  qstrvec_t_size(self) -> size_t
  """
  return _ida_pro.qstrvec_t_size(*args)

def qstrvec_t_get(*args):
  """
  qstrvec_t_get(self, idx) -> PyObject *
  """
  return _ida_pro.qstrvec_t_get(*args)

def qstrvec_t_add(*args):
  """
  qstrvec_t_add(self, s) -> bool
  """
  return _ida_pro.qstrvec_t_add(*args)

def qstrvec_t_clear(*args):
  """
  qstrvec_t_clear(self, qclear) -> bool
  """
  return _ida_pro.qstrvec_t_clear(*args)

def qstrvec_t_insert(*args):
  """
  qstrvec_t_insert(self, idx, s) -> bool
  """
  return _ida_pro.qstrvec_t_insert(*args)

def qstrvec_t_remove(*args):
  """
  qstrvec_t_remove(self, idx) -> bool
  """
  return _ida_pro.qstrvec_t_remove(*args)

def str2user(*args):
  """
  str2user(str) -> PyObject *


  Insert C-style escape characters to string
  
  @return: new string with escape characters inserted
  """
  return _ida_pro.str2user(*args)
class uchar_array(object):
    """
    Proxy of C++ uchar_array class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self, nelements) -> uchar_array
        """
        this = _ida_pro.new_uchar_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_uchar_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, index) -> uchar
        """
        return _ida_pro.uchar_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, index, value)
        """
        return _ida_pro.uchar_array___setitem__(self, *args)

    def cast(self, *args):
        """
        cast(self) -> uchar *
        """
        return _ida_pro.uchar_array_cast(self, *args)

    def frompointer(*args):
        """
        frompointer(t) -> uchar_array
        """
        return _ida_pro.uchar_array_frompointer(*args)

    frompointer = staticmethod(frompointer)
uchar_array_swigregister = _ida_pro.uchar_array_swigregister
uchar_array_swigregister(uchar_array)

def uchar_array_frompointer(*args):
  """
  uchar_array_frompointer(t) -> uchar_array
  """
  return _ida_pro.uchar_array_frompointer(*args)

class tid_array(object):
    """
    Proxy of C++ tid_array class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self, nelements) -> tid_array
        """
        this = _ida_pro.new_tid_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_tid_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, index) -> tid_t
        """
        return _ida_pro.tid_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, index, value)
        """
        return _ida_pro.tid_array___setitem__(self, *args)

    def cast(self, *args):
        """
        cast(self) -> tid_t *
        """
        return _ida_pro.tid_array_cast(self, *args)

    def frompointer(*args):
        """
        frompointer(t) -> tid_array
        """
        return _ida_pro.tid_array_frompointer(*args)

    frompointer = staticmethod(frompointer)
tid_array_swigregister = _ida_pro.tid_array_swigregister
tid_array_swigregister(tid_array)

def tid_array_frompointer(*args):
  """
  tid_array_frompointer(t) -> tid_array
  """
  return _ida_pro.tid_array_frompointer(*args)

class ea_array(object):
    """
    Proxy of C++ ea_array class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self, nelements) -> ea_array
        """
        this = _ida_pro.new_ea_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_ea_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, index) -> ea_t
        """
        return _ida_pro.ea_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, index, value)
        """
        return _ida_pro.ea_array___setitem__(self, *args)

    def cast(self, *args):
        """
        cast(self) -> ea_t *
        """
        return _ida_pro.ea_array_cast(self, *args)

    def frompointer(*args):
        """
        frompointer(t) -> ea_array
        """
        return _ida_pro.ea_array_frompointer(*args)

    frompointer = staticmethod(frompointer)
ea_array_swigregister = _ida_pro.ea_array_swigregister
ea_array_swigregister(ea_array)

def ea_array_frompointer(*args):
  """
  ea_array_frompointer(t) -> ea_array
  """
  return _ida_pro.ea_array_frompointer(*args)

class sel_array(object):
    """
    Proxy of C++ sel_array class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self, nelements) -> sel_array
        """
        this = _ida_pro.new_sel_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_sel_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, index) -> sel_t
        """
        return _ida_pro.sel_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, index, value)
        """
        return _ida_pro.sel_array___setitem__(self, *args)

    def cast(self, *args):
        """
        cast(self) -> sel_t *
        """
        return _ida_pro.sel_array_cast(self, *args)

    def frompointer(*args):
        """
        frompointer(t) -> sel_array
        """
        return _ida_pro.sel_array_frompointer(*args)

    frompointer = staticmethod(frompointer)
sel_array_swigregister = _ida_pro.sel_array_swigregister
sel_array_swigregister(sel_array)

def sel_array_frompointer(*args):
  """
  sel_array_frompointer(t) -> sel_array
  """
  return _ida_pro.sel_array_frompointer(*args)

class uval_array(object):
    """
    Proxy of C++ uval_array class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self, nelements) -> uval_array
        """
        this = _ida_pro.new_uval_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_uval_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, index) -> uval_t
        """
        return _ida_pro.uval_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, index, value)
        """
        return _ida_pro.uval_array___setitem__(self, *args)

    def cast(self, *args):
        """
        cast(self) -> uval_t *
        """
        return _ida_pro.uval_array_cast(self, *args)

    def frompointer(*args):
        """
        frompointer(t) -> uval_array
        """
        return _ida_pro.uval_array_frompointer(*args)

    frompointer = staticmethod(frompointer)
uval_array_swigregister = _ida_pro.uval_array_swigregister
uval_array_swigregister(uval_array)

def uval_array_frompointer(*args):
  """
  uval_array_frompointer(t) -> uval_array
  """
  return _ida_pro.uval_array_frompointer(*args)

class int_pointer(object):
    """
    Proxy of C++ int_pointer class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> int_pointer
        """
        this = _ida_pro.new_int_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_int_pointer
    __del__ = lambda self : None;
    def assign(self, *args):
        """
        assign(self, value)
        """
        return _ida_pro.int_pointer_assign(self, *args)

    def value(self, *args):
        """
        value(self) -> int
        """
        return _ida_pro.int_pointer_value(self, *args)

    def cast(self, *args):
        """
        cast(self) -> int *
        """
        return _ida_pro.int_pointer_cast(self, *args)

    def frompointer(*args):
        """
        frompointer(t) -> int_pointer
        """
        return _ida_pro.int_pointer_frompointer(*args)

    frompointer = staticmethod(frompointer)
int_pointer_swigregister = _ida_pro.int_pointer_swigregister
int_pointer_swigregister(int_pointer)

def int_pointer_frompointer(*args):
  """
  int_pointer_frompointer(t) -> int_pointer
  """
  return _ida_pro.int_pointer_frompointer(*args)

class ea_pointer(object):
    """
    Proxy of C++ ea_pointer class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> ea_pointer
        """
        this = _ida_pro.new_ea_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_ea_pointer
    __del__ = lambda self : None;
    def assign(self, *args):
        """
        assign(self, value)
        """
        return _ida_pro.ea_pointer_assign(self, *args)

    def value(self, *args):
        """
        value(self) -> ea_t
        """
        return _ida_pro.ea_pointer_value(self, *args)

    def cast(self, *args):
        """
        cast(self) -> ea_t *
        """
        return _ida_pro.ea_pointer_cast(self, *args)

    def frompointer(*args):
        """
        frompointer(t) -> ea_pointer
        """
        return _ida_pro.ea_pointer_frompointer(*args)

    frompointer = staticmethod(frompointer)
ea_pointer_swigregister = _ida_pro.ea_pointer_swigregister
ea_pointer_swigregister(ea_pointer)

def ea_pointer_frompointer(*args):
  """
  ea_pointer_frompointer(t) -> ea_pointer
  """
  return _ida_pro.ea_pointer_frompointer(*args)

class sval_pointer(object):
    """
    Proxy of C++ sval_pointer class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> sval_pointer
        """
        this = _ida_pro.new_sval_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_sval_pointer
    __del__ = lambda self : None;
    def assign(self, *args):
        """
        assign(self, value)
        """
        return _ida_pro.sval_pointer_assign(self, *args)

    def value(self, *args):
        """
        value(self) -> sval_t
        """
        return _ida_pro.sval_pointer_value(self, *args)

    def cast(self, *args):
        """
        cast(self) -> sval_t *
        """
        return _ida_pro.sval_pointer_cast(self, *args)

    def frompointer(*args):
        """
        frompointer(t) -> sval_pointer
        """
        return _ida_pro.sval_pointer_frompointer(*args)

    frompointer = staticmethod(frompointer)
sval_pointer_swigregister = _ida_pro.sval_pointer_swigregister
sval_pointer_swigregister(sval_pointer)

def sval_pointer_frompointer(*args):
  """
  sval_pointer_frompointer(t) -> sval_pointer
  """
  return _ida_pro.sval_pointer_frompointer(*args)

class sel_pointer(object):
    """
    Proxy of C++ sel_pointer class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> sel_pointer
        """
        this = _ida_pro.new_sel_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_pro.delete_sel_pointer
    __del__ = lambda self : None;
    def assign(self, *args):
        """
        assign(self, value)
        """
        return _ida_pro.sel_pointer_assign(self, *args)

    def value(self, *args):
        """
        value(self) -> sel_t
        """
        return _ida_pro.sel_pointer_value(self, *args)

    def cast(self, *args):
        """
        cast(self) -> sel_t *
        """
        return _ida_pro.sel_pointer_cast(self, *args)

    def frompointer(*args):
        """
        frompointer(t) -> sel_pointer
        """
        return _ida_pro.sel_pointer_frompointer(*args)

    frompointer = staticmethod(frompointer)
sel_pointer_swigregister = _ida_pro.sel_pointer_swigregister
sel_pointer_swigregister(sel_pointer)

def sel_pointer_frompointer(*args):
  """
  sel_pointer_frompointer(t) -> sel_pointer
  """
  return _ida_pro.sel_pointer_frompointer(*args)

#<pycode(py_pro)>
import ida_idaapi

int64vec_t = longlongvec_t
uint64vec_t = ulonglongvec_t
if ida_idaapi.__EA64__:
    svalvec_t = longlongvec_t
    uvalvec_t = ulonglongvec_t
else:
    svalvec_t = intvec_t
    uvalvec_t = uintvec_t
eavec_t = uvalvec_t

ida_idaapi._listify_types(
        intvec_t,
        uintvec_t,
        longlongvec_t,
        ulonglongvec_t,
        boolvec_t,
        strvec_t)

# -----------------------------------------------------------------------
# qstrvec_t clinked object
class _qstrvec_t(ida_idaapi.py_clinked_object_t):
    """
    WARNING: It is very unlikely an IDAPython user should ever, ever
    have to use this type. It should only be used for IDAPython internals.

    For example, in py_askusingform.py, we ctypes-expose to the IDA
    kernel & UI a qstrvec instance, in case a DropdownListControl is
    constructed.
    That's because that's what ask_form expects, and we have no
    choice but to make a DropdownListControl hold a qstrvec_t.
    This is, afaict, the only situation where a Python
    _qstrvec_t is required.
    """

    def __init__(self, items=None):
        ida_idaapi.py_clinked_object_t.__init__(self)
        # Populate the list if needed
        if items:
            self.from_list(items)

    def _create_clink(self):
        return _ida_pro.qstrvec_t_create()

    def _del_clink(self, lnk):
        return _ida_pro.qstrvec_t_destroy(lnk)

    def _get_clink_ptr(self):
        return _ida_pro.qstrvec_t_get_clink_ptr(self)

    def assign(self, other):
        """
        Copies the contents of 'other' to 'self'
        """
        return _ida_pro.qstrvec_t_assign(self, other)

    def __setitem__(self, idx, s):
        """
        Sets string at the given index
        """
        return _ida_pro.qstrvec_t_set(self, idx, s)

    def __getitem__(self, idx):
        """
        Gets the string at the given index
        """
        return _ida_pro.qstrvec_t_get(self, idx)

    def __get_size(self):
        return _ida_pro.qstrvec_t_size(self)

    size = property(__get_size)
    """
    Returns the count of elements
    """

    def addressof(self, idx):
        """
        Returns the address (as number) of the qstring at the given index
        """
        return _ida_pro.qstrvec_t_addressof(self, idx)

    def add(self, s):
        """
        Add a string to the vector
        """
        return _ida_pro.qstrvec_t_add(self, s)

    def from_list(self, lst):
        """
        Populates the vector from a Python string list
        """
        return _ida_pro.qstrvec_t_from_list(self, lst)

    def clear(self, qclear=False):
        """
        Clears all strings from the vector.
        @param qclear: Just reset the size but do not actually free the memory
        """
        return _ida_pro.qstrvec_t_clear(self, qclear)

    def insert(self, idx, s):
        """
        Insert a string into the vector
        """
        return _ida_pro.qstrvec_t_insert(self, idx, s)

    def remove(self, idx):
        """
        Removes a string from the vector
        """
        return _ida_pro.qstrvec_t_remove(self, idx)

#</pycode(py_pro)>

if _BC695:
    def strlwr(s):
        return str(s).lower()
    def strupr(s):
        return str(s).upper()



