# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: entry
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_entry', [dirname(__file__)])
        except ImportError:
            import _ida_entry
            return _ida_entry
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_entry', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_entry = swig_import_helper()
    del swig_import_helper
else:
    import _ida_entry
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func


def get_entry_qty(*args):
  """
  get_entry_qty() -> size_t


  Get number of entry points.
  """
  return _ida_entry.get_entry_qty(*args)
AEF_UTF8 = _ida_entry.AEF_UTF8
"""
the name is given in UTF-8 (default)
"""
AEF_IDBENC = _ida_entry.AEF_IDBENC
"""
the name is given in the IDB encoding; non-ASCII bytes will be decoded
accordingly Specifying AEF_IDBENC also implies AEF_NODUMMY
"""
AEF_NODUMMY = _ida_entry.AEF_NODUMMY
"""
it begins with a dummy suffix. See also AEF_IDBENC

automatically prepend the name with '_' if
"""

def add_entry(*args):
  """
  add_entry(ord, ea, name, makecode, flags=0x0) -> bool


  Add an entry point to the list of entry points.
  
  @param ord: ordinal number if ordinal number is equal to 'ea' then
              ordinal is not used (C++: uval_t)
  @param ea: linear address (C++: ea_t)
  @param name: name of entry point. If the specified location already
               has a name, the old name will be appended to the regular
               comment. If name == NULL, then the old name will be
               retained. (C++: const char *)
  @param makecode: should the kernel convert bytes at the entry point to
                   instruction(s) (C++: bool)
  @param flags: See AEF_* (C++: int)
  @return: success (currently always true)
  """
  return _ida_entry.add_entry(*args)

def get_entry_ordinal(*args):
  """
  get_entry_ordinal(idx) -> uval_t


  Get ordinal number of an entry point.
  
  @param idx: internal number of entry point. Should be in the range 0..
              get_entry_qty() -1 (C++: size_t)
  @return: ordinal number or 0.
  """
  return _ida_entry.get_entry_ordinal(*args)

def get_entry(*args):
  """
  get_entry(ord) -> ea_t


  Get entry point address by its ordinal
  
  @param ord: ordinal number of entry point (C++: uval_t)
  @return: address or  BADADDR
  """
  return _ida_entry.get_entry(*args)

def get_entry_name(*args):
  """
  get_entry_name(ord) -> ssize_t


  Get name of the entry point by its ordinal.
  
  @param ord: ordinal number of entry point (C++: uval_t)
  @return: size of entry name or -1
  """
  return _ida_entry.get_entry_name(*args)

def rename_entry(*args):
  """
  rename_entry(ord, name, flags=0x0) -> bool


  Rename entry point.
  
  @param ord: ordinal number of the entry point (C++: uval_t)
  @param name: name of entry point. If the specified location already
               has a name, the old name will be appended to a repeatable
               comment. (C++: const char *)
  @param flags: See AEF_* (C++: int)
  @return: success
  """
  return _ida_entry.rename_entry(*args)

def set_entry_forwarder(*args):
  """
  set_entry_forwarder(ord, name, flags=0x0) -> bool


  Set forwarder name for ordinal.
  
  @param ord: ordinal number of the entry point (C++: uval_t)
  @param name: forwarder name for entry point. (C++: const char *)
  @param flags: See AEF_* (C++: int)
  @return: success
  """
  return _ida_entry.set_entry_forwarder(*args)

def get_entry_forwarder(*args):
  """
  get_entry_forwarder(ord) -> ssize_t


  Get forwarder name for the entry point by its ordinal.
  
  @param ord: ordinal number of entry point (C++: uval_t)
  @return: size of entry forwarder name or -1
  """
  return _ida_entry.get_entry_forwarder(*args)

