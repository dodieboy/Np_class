# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: ida
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_ida', [dirname(__file__)])
        except ImportError:
            import _ida_ida
            return _ida_ida
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_ida', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_ida = swig_import_helper()
    del swig_import_helper
else:
    import _ida_ida
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

f_EXE_old = _ida_ida.f_EXE_old
f_COM_old = _ida_ida.f_COM_old
f_BIN = _ida_ida.f_BIN
f_DRV = _ida_ida.f_DRV
f_WIN = _ida_ida.f_WIN
f_HEX = _ida_ida.f_HEX
f_MEX = _ida_ida.f_MEX
f_LX = _ida_ida.f_LX
f_LE = _ida_ida.f_LE
f_NLM = _ida_ida.f_NLM
f_COFF = _ida_ida.f_COFF
f_PE = _ida_ida.f_PE
f_OMF = _ida_ida.f_OMF
f_SREC = _ida_ida.f_SREC
f_ZIP = _ida_ida.f_ZIP
f_OMFLIB = _ida_ida.f_OMFLIB
f_AR = _ida_ida.f_AR
f_LOADER = _ida_ida.f_LOADER
f_ELF = _ida_ida.f_ELF
f_W32RUN = _ida_ida.f_W32RUN
f_AOUT = _ida_ida.f_AOUT
f_PRC = _ida_ida.f_PRC
f_EXE = _ida_ida.f_EXE
f_COM = _ida_ida.f_COM
f_AIXAR = _ida_ida.f_AIXAR
f_MACHO = _ida_ida.f_MACHO

def is_filetype_like_binary(*args):
  """
  is_filetype_like_binary(ft) -> bool


  Is unstructured input file?
  
  
  @param ft (C++: filetype_t)
  """
  return _ida_ida.is_filetype_like_binary(*args)
class compiler_info_t(object):
    """
    Proxy of C++ compiler_info_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_ida_ida.compiler_info_t_id_get, _ida_ida.compiler_info_t_id_set)
    cm = _swig_property(_ida_ida.compiler_info_t_cm_get, _ida_ida.compiler_info_t_cm_set)
    size_i = _swig_property(_ida_ida.compiler_info_t_size_i_get, _ida_ida.compiler_info_t_size_i_set)
    size_b = _swig_property(_ida_ida.compiler_info_t_size_b_get, _ida_ida.compiler_info_t_size_b_set)
    size_e = _swig_property(_ida_ida.compiler_info_t_size_e_get, _ida_ida.compiler_info_t_size_e_set)
    defalign = _swig_property(_ida_ida.compiler_info_t_defalign_get, _ida_ida.compiler_info_t_defalign_set)
    size_s = _swig_property(_ida_ida.compiler_info_t_size_s_get, _ida_ida.compiler_info_t_size_s_set)
    size_l = _swig_property(_ida_ida.compiler_info_t_size_l_get, _ida_ida.compiler_info_t_size_l_set)
    size_ll = _swig_property(_ida_ida.compiler_info_t_size_ll_get, _ida_ida.compiler_info_t_size_ll_set)
    size_ldbl = _swig_property(_ida_ida.compiler_info_t_size_ldbl_get, _ida_ida.compiler_info_t_size_ldbl_set)
    def __init__(self, *args):
        """
        __init__(self) -> compiler_info_t
        """
        this = _ida_ida.new_compiler_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_ida.delete_compiler_info_t
    __del__ = lambda self : None;
compiler_info_t_swigregister = _ida_ida.compiler_info_t_swigregister
compiler_info_t_swigregister(compiler_info_t)

STT_CUR = _ida_ida.STT_CUR
STT_VA = _ida_ida.STT_VA
STT_MM = _ida_ida.STT_MM
STT_DBG = _ida_ida.STT_DBG
IDAINFO_TAG_SIZE = _ida_ida.IDAINFO_TAG_SIZE
"""
The database parameters. This structure is kept in the ida database.
It contains the essential parameters for the current program
"""
IDAINFO_PROCNAME_SIZE = _ida_ida.IDAINFO_PROCNAME_SIZE
IDAINFO_STRLIT_PREF_SIZE = _ida_ida.IDAINFO_STRLIT_PREF_SIZE
class idainfo(object):
    """
    Proxy of C++ idainfo class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    tag = _swig_property(_ida_ida.idainfo_tag_get, _ida_ida.idainfo_tag_set)
    version = _swig_property(_ida_ida.idainfo_version_get, _ida_ida.idainfo_version_set)
    procname = _swig_property(_ida_ida.idainfo_procname_get, _ida_ida.idainfo_procname_set)
    s_genflags = _swig_property(_ida_ida.idainfo_s_genflags_get, _ida_ida.idainfo_s_genflags_set)
    lflags = _swig_property(_ida_ida.idainfo_lflags_get, _ida_ida.idainfo_lflags_set)
    database_change_count = _swig_property(_ida_ida.idainfo_database_change_count_get, _ida_ida.idainfo_database_change_count_set)
    filetype = _swig_property(_ida_ida.idainfo_filetype_get, _ida_ida.idainfo_filetype_set)
    ostype = _swig_property(_ida_ida.idainfo_ostype_get, _ida_ida.idainfo_ostype_set)
    apptype = _swig_property(_ida_ida.idainfo_apptype_get, _ida_ida.idainfo_apptype_set)
    asmtype = _swig_property(_ida_ida.idainfo_asmtype_get, _ida_ida.idainfo_asmtype_set)
    specsegs = _swig_property(_ida_ida.idainfo_specsegs_get, _ida_ida.idainfo_specsegs_set)
    af = _swig_property(_ida_ida.idainfo_af_get, _ida_ida.idainfo_af_set)
    af2 = _swig_property(_ida_ida.idainfo_af2_get, _ida_ida.idainfo_af2_set)
    baseaddr = _swig_property(_ida_ida.idainfo_baseaddr_get, _ida_ida.idainfo_baseaddr_set)
    start_ss = _swig_property(_ida_ida.idainfo_start_ss_get, _ida_ida.idainfo_start_ss_set)
    start_cs = _swig_property(_ida_ida.idainfo_start_cs_get, _ida_ida.idainfo_start_cs_set)
    start_ip = _swig_property(_ida_ida.idainfo_start_ip_get, _ida_ida.idainfo_start_ip_set)
    start_ea = _swig_property(_ida_ida.idainfo_start_ea_get, _ida_ida.idainfo_start_ea_set)
    start_sp = _swig_property(_ida_ida.idainfo_start_sp_get, _ida_ida.idainfo_start_sp_set)
    main = _swig_property(_ida_ida.idainfo_main_get, _ida_ida.idainfo_main_set)
    min_ea = _swig_property(_ida_ida.idainfo_min_ea_get, _ida_ida.idainfo_min_ea_set)
    max_ea = _swig_property(_ida_ida.idainfo_max_ea_get, _ida_ida.idainfo_max_ea_set)
    omin_ea = _swig_property(_ida_ida.idainfo_omin_ea_get, _ida_ida.idainfo_omin_ea_set)
    omax_ea = _swig_property(_ida_ida.idainfo_omax_ea_get, _ida_ida.idainfo_omax_ea_set)
    lowoff = _swig_property(_ida_ida.idainfo_lowoff_get, _ida_ida.idainfo_lowoff_set)
    highoff = _swig_property(_ida_ida.idainfo_highoff_get, _ida_ida.idainfo_highoff_set)
    maxref = _swig_property(_ida_ida.idainfo_maxref_get, _ida_ida.idainfo_maxref_set)
    xrefnum = _swig_property(_ida_ida.idainfo_xrefnum_get, _ida_ida.idainfo_xrefnum_set)
    type_xrefnum = _swig_property(_ida_ida.idainfo_type_xrefnum_get, _ida_ida.idainfo_type_xrefnum_set)
    refcmtnum = _swig_property(_ida_ida.idainfo_refcmtnum_get, _ida_ida.idainfo_refcmtnum_set)
    s_xrefflag = _swig_property(_ida_ida.idainfo_s_xrefflag_get, _ida_ida.idainfo_s_xrefflag_set)
    max_autoname_len = _swig_property(_ida_ida.idainfo_max_autoname_len_get, _ida_ida.idainfo_max_autoname_len_set)
    nametype = _swig_property(_ida_ida.idainfo_nametype_get, _ida_ida.idainfo_nametype_set)
    short_demnames = _swig_property(_ida_ida.idainfo_short_demnames_get, _ida_ida.idainfo_short_demnames_set)
    long_demnames = _swig_property(_ida_ida.idainfo_long_demnames_get, _ida_ida.idainfo_long_demnames_set)
    demnames = _swig_property(_ida_ida.idainfo_demnames_get, _ida_ida.idainfo_demnames_set)
    listnames = _swig_property(_ida_ida.idainfo_listnames_get, _ida_ida.idainfo_listnames_set)
    indent = _swig_property(_ida_ida.idainfo_indent_get, _ida_ida.idainfo_indent_set)
    comment = _swig_property(_ida_ida.idainfo_comment_get, _ida_ida.idainfo_comment_set)
    margin = _swig_property(_ida_ida.idainfo_margin_get, _ida_ida.idainfo_margin_set)
    lenxref = _swig_property(_ida_ida.idainfo_lenxref_get, _ida_ida.idainfo_lenxref_set)
    outflags = _swig_property(_ida_ida.idainfo_outflags_get, _ida_ida.idainfo_outflags_set)
    s_cmtflg = _swig_property(_ida_ida.idainfo_s_cmtflg_get, _ida_ida.idainfo_s_cmtflg_set)
    s_limiter = _swig_property(_ida_ida.idainfo_s_limiter_get, _ida_ida.idainfo_s_limiter_set)
    bin_prefix_size = _swig_property(_ida_ida.idainfo_bin_prefix_size_get, _ida_ida.idainfo_bin_prefix_size_set)
    s_prefflag = _swig_property(_ida_ida.idainfo_s_prefflag_get, _ida_ida.idainfo_s_prefflag_set)
    strlit_flags = _swig_property(_ida_ida.idainfo_strlit_flags_get, _ida_ida.idainfo_strlit_flags_set)
    strlit_break = _swig_property(_ida_ida.idainfo_strlit_break_get, _ida_ida.idainfo_strlit_break_set)
    strlit_zeroes = _swig_property(_ida_ida.idainfo_strlit_zeroes_get, _ida_ida.idainfo_strlit_zeroes_set)
    strtype = _swig_property(_ida_ida.idainfo_strtype_get, _ida_ida.idainfo_strtype_set)
    strlit_pref = _swig_property(_ida_ida.idainfo_strlit_pref_get, _ida_ida.idainfo_strlit_pref_set)
    strlit_sernum = _swig_property(_ida_ida.idainfo_strlit_sernum_get, _ida_ida.idainfo_strlit_sernum_set)
    datatypes = _swig_property(_ida_ida.idainfo_datatypes_get, _ida_ida.idainfo_datatypes_set)
    cc = _swig_property(_ida_ida.idainfo_cc_get, _ida_ida.idainfo_cc_set)
    abibits = _swig_property(_ida_ida.idainfo_abibits_get, _ida_ida.idainfo_abibits_set)
    appcall_options = _swig_property(_ida_ida.idainfo_appcall_options_get, _ida_ida.idainfo_appcall_options_set)
    def get_abiname(self, *args):
        """
        get_abiname(self) -> qstring
        """
        return _ida_ida.idainfo_get_abiname(self, *args)

    def get_minEA(self, *args):
        """
        get_minEA(self) -> ea_t
        """
        return _ida_ida.idainfo_get_minEA(self, *args)

    def set_minEA(self, *args):
        """
        set_minEA(self, ea)
        """
        return _ida_ida.idainfo_set_minEA(self, *args)

    def get_maxEA(self, *args):
        """
        get_maxEA(self) -> ea_t
        """
        return _ida_ida.idainfo_get_maxEA(self, *args)

    def set_maxEA(self, *args):
        """
        set_maxEA(self, ea)
        """
        return _ida_ida.idainfo_set_maxEA(self, *args)

    def get_procName(self, *args):
        """
        get_procName(self) -> qstring
        """
        return _ida_ida.idainfo_get_procName(self, *args)

    abiname = property(get_abiname)

    minEA = property(get_minEA, set_minEA)
    maxEA = property(get_maxEA, set_maxEA)
    procName = property(get_procName)


idainfo_swigregister = _ida_ida.idainfo_swigregister
idainfo_swigregister(idainfo)
INFFL_AUTO = _ida_ida.INFFL_AUTO
"""
Autoanalysis is enabled?
"""
INFFL_ALLASM = _ida_ida.INFFL_ALLASM
"""
the target assembler

may use constructs not supported by
"""
INFFL_LOADIDC = _ida_ida.INFFL_LOADIDC
"""
loading an idc file that contains database info
"""
INFFL_NOUSER = _ida_ida.INFFL_NOUSER
"""
do not store user info in the database
"""
INFFL_READONLY = _ida_ida.INFFL_READONLY
"""
(internal) temporary interdiction to modify the database
"""
INFFL_CHKOPS = _ida_ida.INFFL_CHKOPS
"""
check manual operands? (unused)
"""
INFFL_NMOPS = _ida_ida.INFFL_NMOPS
"""
allow non-matched operands? (unused)
"""
INFFL_GRAPH_VIEW = _ida_ida.INFFL_GRAPH_VIEW
"""
currently using graph options (\\dto{graph})
"""
LFLG_PC_FPP = _ida_ida.LFLG_PC_FPP
"""
decode floating point processor instructions?
"""
LFLG_PC_FLAT = _ida_ida.LFLG_PC_FLAT
"""
32-bit program?
"""
LFLG_64BIT = _ida_ida.LFLG_64BIT
"""
64-bit program?
"""
LFLG_IS_DLL = _ida_ida.LFLG_IS_DLL
"""
Is dynamic library?
"""
LFLG_FLAT_OFF32 = _ida_ida.LFLG_FLAT_OFF32
"""
treat 'REF_OFF32' as 32-bit offset for 16bit segments (otherwise try
SEG16:OFF16)
"""
LFLG_MSF = _ida_ida.LFLG_MSF
"""
Byte order: is MSB first?
"""
LFLG_WIDE_HBF = _ida_ida.LFLG_WIDE_HBF
"""
(wide bytes: \\ph{dnbits} > 8)

Bit order of wide bytes: high byte first?
"""
LFLG_DBG_NOPATH = _ida_ida.LFLG_DBG_NOPATH
"""
do not store input full path in debugger process options
"""
LFLG_SNAPSHOT = _ida_ida.LFLG_SNAPSHOT
"""
memory snapshot was taken?
"""
LFLG_PACK = _ida_ida.LFLG_PACK
"""
pack the database?
"""
LFLG_COMPRESS = _ida_ida.LFLG_COMPRESS
"""
compress the database?
"""
LFLG_KERNMODE = _ida_ida.LFLG_KERNMODE
"""
is kernel mode binary?
"""
IDB_UNPACKED = _ida_ida.IDB_UNPACKED
"""
leave database components unpacked
"""
IDB_PACKED = _ida_ida.IDB_PACKED
"""
pack database components into .idb
"""
IDB_COMPRESSED = _ida_ida.IDB_COMPRESSED
"""
compress & pack database components
"""
AF_CODE = _ida_ida.AF_CODE
"""
Trace execution flow.
"""
AF_MARKCODE = _ida_ida.AF_MARKCODE
"""
Mark typical code sequences as code.
"""
AF_JUMPTBL = _ida_ida.AF_JUMPTBL
"""
Locate and create jump tables.
"""
AF_PURDAT = _ida_ida.AF_PURDAT
"""
Control flow to data segment is ignored.
"""
AF_USED = _ida_ida.AF_USED
"""
Analyze and create all xrefs.
"""
AF_UNK = _ida_ida.AF_UNK
"""
Delete instructions with no xrefs.
"""
AF_PROCPTR = _ida_ida.AF_PROCPTR
"""
Create function if data xref data->code32 exists.
"""
AF_PROC = _ida_ida.AF_PROC
"""
Create functions if call is present.
"""
AF_FTAIL = _ida_ida.AF_FTAIL
"""
Create function tails.
"""
AF_LVAR = _ida_ida.AF_LVAR
"""
Create stack variables.
"""
AF_STKARG = _ida_ida.AF_STKARG
"""
Propagate stack argument information.
"""
AF_REGARG = _ida_ida.AF_REGARG
"""
Propagate register argument information.
"""
AF_TRACE = _ida_ida.AF_TRACE
"""
Trace stack pointer.
"""
AF_VERSP = _ida_ida.AF_VERSP
"""
Perform full SP-analysis. (\\ph{verify_sp})
"""
AF_ANORET = _ida_ida.AF_ANORET
"""
Perform 'no-return' analysis.
"""
AF_MEMFUNC = _ida_ida.AF_MEMFUNC
"""
Try to guess member function types.
"""
AF_TRFUNC = _ida_ida.AF_TRFUNC
"""
Truncate functions upon code deletion.
"""
AF_STRLIT = _ida_ida.AF_STRLIT
"""
Create string literal if data xref exists.
"""
AF_CHKUNI = _ida_ida.AF_CHKUNI
"""
Check for unicode strings.
"""
AF_FIXUP = _ida_ida.AF_FIXUP
"""
Create offsets and segments using fixup info.
"""
AF_DREFOFF = _ida_ida.AF_DREFOFF
"""
Create offset if data xref to seg32 exists.
"""
AF_IMMOFF = _ida_ida.AF_IMMOFF
"""
Convert 32bit instruction operand to offset.
"""
AF_DATOFF = _ida_ida.AF_DATOFF
"""
Automatically convert data to offsets.
"""
AF_FLIRT = _ida_ida.AF_FLIRT
"""
Use flirt signatures.
"""
AF_SIGCMT = _ida_ida.AF_SIGCMT
"""
Append a signature name comment for recognized anonymous library
functions.
"""
AF_SIGMLT = _ida_ida.AF_SIGMLT
"""
Allow recognition of several copies of the same function.
"""
AF_HFLIRT = _ida_ida.AF_HFLIRT
"""
Automatically hide library functions.
"""
AF_JFUNC = _ida_ida.AF_JFUNC
"""
Rename jump functions as j_...
"""
AF_NULLSUB = _ida_ida.AF_NULLSUB
"""
Rename empty functions as nullsub_...
"""
AF_DODATA = _ida_ida.AF_DODATA
"""
Coagulate data segs at the final pass.
"""
AF_DOCODE = _ida_ida.AF_DOCODE
"""
Coagulate code segs at the final pass.
"""
AF_FINAL = _ida_ida.AF_FINAL
"""
Final pass of analysis.
"""
AF2_DOEH = _ida_ida.AF2_DOEH
"""
Handle EH information.
"""
AF2_DORTTI = _ida_ida.AF2_DORTTI
"""
Handle RTTI information.
"""
AF2_MACRO = _ida_ida.AF2_MACRO
"""
Try to combine several instructions into a macro instruction
"""
SW_SEGXRF = _ida_ida.SW_SEGXRF
"""
show segments in xrefs?
"""
SW_XRFMRK = _ida_ida.SW_XRFMRK
"""
show xref type marks?
"""
SW_XRFFNC = _ida_ida.SW_XRFFNC
"""
show function offsets?
"""
SW_XRFVAL = _ida_ida.SW_XRFVAL
"""
show xref values? (otherwise-"...")
"""
NM_REL_OFF = _ida_ida.NM_REL_OFF
NM_PTR_OFF = _ida_ida.NM_PTR_OFF
NM_NAM_OFF = _ida_ida.NM_NAM_OFF
NM_REL_EA = _ida_ida.NM_REL_EA
NM_PTR_EA = _ida_ida.NM_PTR_EA
NM_NAM_EA = _ida_ida.NM_NAM_EA
NM_EA = _ida_ida.NM_EA
NM_EA4 = _ida_ida.NM_EA4
NM_EA8 = _ida_ida.NM_EA8
NM_SHORT = _ida_ida.NM_SHORT
NM_SERIAL = _ida_ida.NM_SERIAL
DEMNAM_MASK = _ida_ida.DEMNAM_MASK
"""
mask for name form
"""
DEMNAM_CMNT = _ida_ida.DEMNAM_CMNT
"""
display demangled names as comments
"""
DEMNAM_NAME = _ida_ida.DEMNAM_NAME
"""
display demangled names as regular names
"""
DEMNAM_NONE = _ida_ida.DEMNAM_NONE
"""
don't display demangled names
"""
DEMNAM_GCC3 = _ida_ida.DEMNAM_GCC3
"""
assume gcc3 names (valid for gnu compiler)
"""
DEMNAM_FIRST = _ida_ida.DEMNAM_FIRST
"""
override type info
"""
LN_NORMAL = _ida_ida.LN_NORMAL
"""
include normal names
"""
LN_PUBLIC = _ida_ida.LN_PUBLIC
"""
include public names
"""
LN_AUTO = _ida_ida.LN_AUTO
"""
include autogenerated names
"""
LN_WEAK = _ida_ida.LN_WEAK
"""
include weak names
"""
OFLG_SHOW_VOID = _ida_ida.OFLG_SHOW_VOID
"""
Display void marks?
"""
OFLG_SHOW_AUTO = _ida_ida.OFLG_SHOW_AUTO
"""
Display autoanalysis indicator?
"""
OFLG_GEN_NULL = _ida_ida.OFLG_GEN_NULL
"""
Generate empty lines?
"""
OFLG_SHOW_PREF = _ida_ida.OFLG_SHOW_PREF
"""
Show line prefixes?
"""
OFLG_PREF_SEG = _ida_ida.OFLG_PREF_SEG
"""
line prefixes with segment name?
"""
OFLG_LZERO = _ida_ida.OFLG_LZERO
"""
generate leading zeroes in numbers
"""
OFLG_GEN_ORG = _ida_ida.OFLG_GEN_ORG
"""
Generate 'org' directives?
"""
OFLG_GEN_ASSUME = _ida_ida.OFLG_GEN_ASSUME
"""
Generate 'assume' directives?
"""
OFLG_GEN_TRYBLKS = _ida_ida.OFLG_GEN_TRYBLKS
"""
Generate try/catch directives?
"""
SCF_RPTCMT = _ida_ida.SCF_RPTCMT
"""
show repeatable comments?
"""
SCF_ALLCMT = _ida_ida.SCF_ALLCMT
"""
comment all lines?
"""
SCF_NOCMT = _ida_ida.SCF_NOCMT
"""
no comments at all
"""
SCF_LINNUM = _ida_ida.SCF_LINNUM
"""
show source line numbers
"""
SCF_TESTMODE = _ida_ida.SCF_TESTMODE
"""
testida.idc is running
"""
SCF_SHHID_ITEM = _ida_ida.SCF_SHHID_ITEM
"""
show hidden instructions
"""
SCF_SHHID_FUNC = _ida_ida.SCF_SHHID_FUNC
"""
show hidden functions
"""
SCF_SHHID_SEGM = _ida_ida.SCF_SHHID_SEGM
"""
show hidden segments
"""
LMT_THIN = _ida_ida.LMT_THIN
"""
thin borders
"""
LMT_THICK = _ida_ida.LMT_THICK
"""
thick borders
"""
LMT_EMPTY = _ida_ida.LMT_EMPTY
"""
empty lines at the end of basic blocks
"""
PREF_SEGADR = _ida_ida.PREF_SEGADR
"""
show segment addresses?
"""
PREF_FNCOFF = _ida_ida.PREF_FNCOFF
"""
show function offsets?
"""
PREF_STACK = _ida_ida.PREF_STACK
"""
show stack pointer?
"""
STRF_GEN = _ida_ida.STRF_GEN
"""
generate names?
"""
STRF_AUTO = _ida_ida.STRF_AUTO
"""
names have 'autogenerated' bit?
"""
STRF_SERIAL = _ida_ida.STRF_SERIAL
"""
generate serial names?
"""
STRF_UNICODE = _ida_ida.STRF_UNICODE
"""
unicode strings are present?
"""
STRF_COMMENT = _ida_ida.STRF_COMMENT
"""
generate auto comment for string references?
"""
STRF_SAVECASE = _ida_ida.STRF_SAVECASE
"""
preserve case of strings for identifiers
"""
ABI_8ALIGN4 = _ida_ida.ABI_8ALIGN4
"""
4 byte alignment for 8byte scalars (__int64/double) inside structures?
"""
ABI_PACK_STKARGS = _ida_ida.ABI_PACK_STKARGS
"""
do not align stack arguments to stack slots
"""
ABI_BIGARG_ALIGN = _ida_ida.ABI_BIGARG_ALIGN
"""
(e.g. __int64 argument should be 8byte aligned on some 32bit
platforms)

use natural type alignment for argument if the alignment exceeds
native word size
"""
ABI_STACK_LDBL = _ida_ida.ABI_STACK_LDBL
"""
long double arguments are passed on stack
"""
ABI_STACK_VARARGS = _ida_ida.ABI_STACK_VARARGS
"""
varargs are always passed on stack (even when there are free
registers)
"""
ABI_HARD_FLOAT = _ida_ida.ABI_HARD_FLOAT
"""
use the floating-point register set
"""
ABI_SET_BY_USER = _ida_ida.ABI_SET_BY_USER
"""
compiler/abi were set by user flag and require SETCOMP_BY_USER flag to
be changed
"""
ABI_GCC_LAYOUT = _ida_ida.ABI_GCC_LAYOUT
"""
use gcc layout for udts (used for mingw)
"""
ABI_MAP_STKARGS = _ida_ida.ABI_MAP_STKARGS
"""
register arguments are mapped to stack area (and consume stack slots)
"""

SW_RPTCMT = _ida_ida.SW_RPTCMT
SW_ALLCMT = _ida_ida.SW_ALLCMT
SW_NOCMT = _ida_ida.SW_NOCMT
SW_LINNUM = _ida_ida.SW_LINNUM
SW_TESTMODE = _ida_ida.SW_TESTMODE
SW_SHHID_ITEM = _ida_ida.SW_SHHID_ITEM
SW_SHHID_FUNC = _ida_ida.SW_SHHID_FUNC
SW_SHHID_SEGM = _ida_ida.SW_SHHID_SEGM
INF_VERSION = _ida_ida.INF_VERSION
INF_PROCNAME = _ida_ida.INF_PROCNAME
INF_GENFLAGS = _ida_ida.INF_GENFLAGS
INF_LFLAGS = _ida_ida.INF_LFLAGS
INF_DATABASE_CHANGE_COUNT = _ida_ida.INF_DATABASE_CHANGE_COUNT
INF_FILETYPE = _ida_ida.INF_FILETYPE
INF_OSTYPE = _ida_ida.INF_OSTYPE
INF_APPTYPE = _ida_ida.INF_APPTYPE
INF_ASMTYPE = _ida_ida.INF_ASMTYPE
INF_SPECSEGS = _ida_ida.INF_SPECSEGS
INF_AF = _ida_ida.INF_AF
INF_AF2 = _ida_ida.INF_AF2
INF_BASEADDR = _ida_ida.INF_BASEADDR
INF_START_SS = _ida_ida.INF_START_SS
INF_START_CS = _ida_ida.INF_START_CS
INF_START_IP = _ida_ida.INF_START_IP
INF_START_EA = _ida_ida.INF_START_EA
INF_START_SP = _ida_ida.INF_START_SP
INF_MAIN = _ida_ida.INF_MAIN
INF_MIN_EA = _ida_ida.INF_MIN_EA
INF_MAX_EA = _ida_ida.INF_MAX_EA
INF_OMIN_EA = _ida_ida.INF_OMIN_EA
INF_OMAX_EA = _ida_ida.INF_OMAX_EA
INF_LOWOFF = _ida_ida.INF_LOWOFF
INF_HIGHOFF = _ida_ida.INF_HIGHOFF
INF_MAXREF = _ida_ida.INF_MAXREF
INF_PRIVRANGE = _ida_ida.INF_PRIVRANGE
INF_PRIVRANGE_START_EA = _ida_ida.INF_PRIVRANGE_START_EA
INF_PRIVRANGE_END_EA = _ida_ida.INF_PRIVRANGE_END_EA
INF_NETDELTA = _ida_ida.INF_NETDELTA
INF_XREFNUM = _ida_ida.INF_XREFNUM
INF_TYPE_XREFNUM = _ida_ida.INF_TYPE_XREFNUM
INF_REFCMTNUM = _ida_ida.INF_REFCMTNUM
INF_XREFFLAG = _ida_ida.INF_XREFFLAG
INF_MAX_AUTONAME_LEN = _ida_ida.INF_MAX_AUTONAME_LEN
INF_NAMETYPE = _ida_ida.INF_NAMETYPE
INF_SHORT_DEMNAMES = _ida_ida.INF_SHORT_DEMNAMES
INF_LONG_DEMNAMES = _ida_ida.INF_LONG_DEMNAMES
INF_DEMNAMES = _ida_ida.INF_DEMNAMES
INF_LISTNAMES = _ida_ida.INF_LISTNAMES
INF_INDENT = _ida_ida.INF_INDENT
INF_COMMENT = _ida_ida.INF_COMMENT
INF_MARGIN = _ida_ida.INF_MARGIN
INF_LENXREF = _ida_ida.INF_LENXREF
INF_OUTFLAGS = _ida_ida.INF_OUTFLAGS
INF_CMTFLG = _ida_ida.INF_CMTFLG
INF_LIMITER = _ida_ida.INF_LIMITER
INF_BIN_PREFIX_SIZE = _ida_ida.INF_BIN_PREFIX_SIZE
INF_PREFFLAG = _ida_ida.INF_PREFFLAG
INF_STRLIT_FLAGS = _ida_ida.INF_STRLIT_FLAGS
INF_STRLIT_BREAK = _ida_ida.INF_STRLIT_BREAK
INF_STRLIT_ZEROES = _ida_ida.INF_STRLIT_ZEROES
INF_STRTYPE = _ida_ida.INF_STRTYPE
INF_STRLIT_PREF = _ida_ida.INF_STRLIT_PREF
INF_STRLIT_SERNUM = _ida_ida.INF_STRLIT_SERNUM
INF_DATATYPES = _ida_ida.INF_DATATYPES
INF_CC = _ida_ida.INF_CC
INF_CC_ID = _ida_ida.INF_CC_ID
INF_CC_CM = _ida_ida.INF_CC_CM
INF_CC_SIZE_I = _ida_ida.INF_CC_SIZE_I
INF_CC_SIZE_B = _ida_ida.INF_CC_SIZE_B
INF_CC_SIZE_E = _ida_ida.INF_CC_SIZE_E
INF_CC_DEFALIGN = _ida_ida.INF_CC_DEFALIGN
INF_CC_SIZE_S = _ida_ida.INF_CC_SIZE_S
INF_CC_SIZE_L = _ida_ida.INF_CC_SIZE_L
INF_CC_SIZE_LL = _ida_ida.INF_CC_SIZE_LL
INF_CC_SIZE_LDBL = _ida_ida.INF_CC_SIZE_LDBL
INF_ABIBITS = _ida_ida.INF_ABIBITS
INF_APPCALL_OPTIONS = _ida_ida.INF_APPCALL_OPTIONS
INF_LAST = _ida_ida.INF_LAST

def inf_get_version(*args):
  """
  inf_get_version() -> ushort
  """
  return _ida_ida.inf_get_version(*args)

def inf_set_version(*args):
  """
  inf_set_version(_v) -> bool
  """
  return _ida_ida.inf_set_version(*args)

def inf_get_genflags(*args):
  """
  inf_get_genflags() -> ushort
  """
  return _ida_ida.inf_get_genflags(*args)

def inf_set_genflags(*args):
  """
  inf_set_genflags(_v) -> bool
  """
  return _ida_ida.inf_set_genflags(*args)

def inf_is_auto_enabled(*args):
  """
  inf_is_auto_enabled() -> bool
  """
  return _ida_ida.inf_is_auto_enabled(*args)

def inf_set_auto_enabled(*args):
  """
  inf_set_auto_enabled(_v=True) -> bool
  """
  return _ida_ida.inf_set_auto_enabled(*args)

def inf_use_allasm(*args):
  """
  inf_use_allasm() -> bool
  """
  return _ida_ida.inf_use_allasm(*args)

def inf_set_use_allasm(*args):
  """
  inf_set_use_allasm(_v=True) -> bool
  """
  return _ida_ida.inf_set_use_allasm(*args)

def inf_loading_idc(*args):
  """
  inf_loading_idc() -> bool
  """
  return _ida_ida.inf_loading_idc(*args)

def inf_set_loading_idc(*args):
  """
  inf_set_loading_idc(_v=True) -> bool
  """
  return _ida_ida.inf_set_loading_idc(*args)

def inf_no_store_user_info(*args):
  """
  inf_no_store_user_info() -> bool
  """
  return _ida_ida.inf_no_store_user_info(*args)

def inf_set_no_store_user_info(*args):
  """
  inf_set_no_store_user_info(_v=True) -> bool
  """
  return _ida_ida.inf_set_no_store_user_info(*args)

def inf_readonly_idb(*args):
  """
  inf_readonly_idb() -> bool
  """
  return _ida_ida.inf_readonly_idb(*args)

def inf_set_readonly_idb(*args):
  """
  inf_set_readonly_idb(_v=True) -> bool
  """
  return _ida_ida.inf_set_readonly_idb(*args)

def inf_check_manual_ops(*args):
  """
  inf_check_manual_ops() -> bool
  """
  return _ida_ida.inf_check_manual_ops(*args)

def inf_set_check_manual_ops(*args):
  """
  inf_set_check_manual_ops(_v=True) -> bool
  """
  return _ida_ida.inf_set_check_manual_ops(*args)

def inf_allow_non_matched_ops(*args):
  """
  inf_allow_non_matched_ops() -> bool
  """
  return _ida_ida.inf_allow_non_matched_ops(*args)

def inf_set_allow_non_matched_ops(*args):
  """
  inf_set_allow_non_matched_ops(_v=True) -> bool
  """
  return _ida_ida.inf_set_allow_non_matched_ops(*args)

def inf_is_graph_view(*args):
  """
  inf_is_graph_view() -> bool
  """
  return _ida_ida.inf_is_graph_view(*args)

def inf_set_graph_view(*args):
  """
  inf_set_graph_view(_v=True) -> bool
  """
  return _ida_ida.inf_set_graph_view(*args)

def inf_get_lflags(*args):
  """
  inf_get_lflags() -> uint32
  """
  return _ida_ida.inf_get_lflags(*args)

def inf_set_lflags(*args):
  """
  inf_set_lflags(_v) -> bool
  """
  return _ida_ida.inf_set_lflags(*args)

def inf_decode_fpp(*args):
  """
  inf_decode_fpp() -> bool
  """
  return _ida_ida.inf_decode_fpp(*args)

def inf_set_decode_fpp(*args):
  """
  inf_set_decode_fpp(_v=True) -> bool
  """
  return _ida_ida.inf_set_decode_fpp(*args)

def inf_is_32bit(*args):
  """
  inf_is_32bit() -> bool
  """
  return _ida_ida.inf_is_32bit(*args)

def inf_set_32bit(*args):
  """
  inf_set_32bit(_v=True) -> bool
  """
  return _ida_ida.inf_set_32bit(*args)

def inf_is_64bit(*args):
  """
  inf_is_64bit() -> bool
  """
  return _ida_ida.inf_is_64bit(*args)

def inf_set_64bit(*args):
  """
  inf_set_64bit(_v=True) -> bool
  """
  return _ida_ida.inf_set_64bit(*args)

def inf_is_dll(*args):
  """
  inf_is_dll() -> bool
  """
  return _ida_ida.inf_is_dll(*args)

def inf_set_dll(*args):
  """
  inf_set_dll(_v=True) -> bool
  """
  return _ida_ida.inf_set_dll(*args)

def inf_is_flat_off32(*args):
  """
  inf_is_flat_off32() -> bool
  """
  return _ida_ida.inf_is_flat_off32(*args)

def inf_set_flat_off32(*args):
  """
  inf_set_flat_off32(_v=True) -> bool
  """
  return _ida_ida.inf_set_flat_off32(*args)

def inf_is_be(*args):
  """
  inf_is_be() -> bool
  """
  return _ida_ida.inf_is_be(*args)

def inf_set_be(*args):
  """
  inf_set_be(_v=True) -> bool
  """
  return _ida_ida.inf_set_be(*args)

def inf_is_wide_high_byte_first(*args):
  """
  inf_is_wide_high_byte_first() -> bool
  """
  return _ida_ida.inf_is_wide_high_byte_first(*args)

def inf_set_wide_high_byte_first(*args):
  """
  inf_set_wide_high_byte_first(_v=True) -> bool
  """
  return _ida_ida.inf_set_wide_high_byte_first(*args)

def inf_dbg_no_store_path(*args):
  """
  inf_dbg_no_store_path() -> bool
  """
  return _ida_ida.inf_dbg_no_store_path(*args)

def inf_set_dbg_no_store_path(*args):
  """
  inf_set_dbg_no_store_path(_v=True) -> bool
  """
  return _ida_ida.inf_set_dbg_no_store_path(*args)

def inf_is_snapshot(*args):
  """
  inf_is_snapshot() -> bool
  """
  return _ida_ida.inf_is_snapshot(*args)

def inf_set_snapshot(*args):
  """
  inf_set_snapshot(_v=True) -> bool
  """
  return _ida_ida.inf_set_snapshot(*args)

def inf_pack_idb(*args):
  """
  inf_pack_idb() -> bool
  """
  return _ida_ida.inf_pack_idb(*args)

def inf_set_pack_idb(*args):
  """
  inf_set_pack_idb(_v=True) -> bool
  """
  return _ida_ida.inf_set_pack_idb(*args)

def inf_compress_idb(*args):
  """
  inf_compress_idb() -> bool
  """
  return _ida_ida.inf_compress_idb(*args)

def inf_set_compress_idb(*args):
  """
  inf_set_compress_idb(_v=True) -> bool
  """
  return _ida_ida.inf_set_compress_idb(*args)

def inf_is_kernel_mode(*args):
  """
  inf_is_kernel_mode() -> bool
  """
  return _ida_ida.inf_is_kernel_mode(*args)

def inf_set_kernel_mode(*args):
  """
  inf_set_kernel_mode(_v=True) -> bool
  """
  return _ida_ida.inf_set_kernel_mode(*args)

def inf_get_database_change_count(*args):
  """
  inf_get_database_change_count() -> uint32
  """
  return _ida_ida.inf_get_database_change_count(*args)

def inf_set_database_change_count(*args):
  """
  inf_set_database_change_count(_v) -> bool
  """
  return _ida_ida.inf_set_database_change_count(*args)

def inf_get_filetype(*args):
  """
  inf_get_filetype() -> filetype_t
  """
  return _ida_ida.inf_get_filetype(*args)

def inf_set_filetype(*args):
  """
  inf_set_filetype(_v) -> bool
  """
  return _ida_ida.inf_set_filetype(*args)

def inf_get_ostype(*args):
  """
  inf_get_ostype() -> ushort
  """
  return _ida_ida.inf_get_ostype(*args)

def inf_set_ostype(*args):
  """
  inf_set_ostype(_v) -> bool
  """
  return _ida_ida.inf_set_ostype(*args)

def inf_get_apptype(*args):
  """
  inf_get_apptype() -> ushort
  """
  return _ida_ida.inf_get_apptype(*args)

def inf_set_apptype(*args):
  """
  inf_set_apptype(_v) -> bool
  """
  return _ida_ida.inf_set_apptype(*args)

def inf_get_asmtype(*args):
  """
  inf_get_asmtype() -> uchar
  """
  return _ida_ida.inf_get_asmtype(*args)

def inf_set_asmtype(*args):
  """
  inf_set_asmtype(_v) -> bool
  """
  return _ida_ida.inf_set_asmtype(*args)

def inf_get_specsegs(*args):
  """
  inf_get_specsegs() -> uchar
  """
  return _ida_ida.inf_get_specsegs(*args)

def inf_set_specsegs(*args):
  """
  inf_set_specsegs(_v) -> bool
  """
  return _ida_ida.inf_set_specsegs(*args)

def inf_get_af(*args):
  """
  inf_get_af() -> uint32
  """
  return _ida_ida.inf_get_af(*args)

def inf_set_af(*args):
  """
  inf_set_af(_v) -> bool
  """
  return _ida_ida.inf_set_af(*args)

def inf_trace_flow(*args):
  """
  inf_trace_flow() -> bool
  """
  return _ida_ida.inf_trace_flow(*args)

def inf_set_trace_flow(*args):
  """
  inf_set_trace_flow(_v=True) -> bool
  """
  return _ida_ida.inf_set_trace_flow(*args)

def inf_mark_code(*args):
  """
  inf_mark_code() -> bool
  """
  return _ida_ida.inf_mark_code(*args)

def inf_set_mark_code(*args):
  """
  inf_set_mark_code(_v=True) -> bool
  """
  return _ida_ida.inf_set_mark_code(*args)

def inf_create_jump_tables(*args):
  """
  inf_create_jump_tables() -> bool
  """
  return _ida_ida.inf_create_jump_tables(*args)

def inf_set_create_jump_tables(*args):
  """
  inf_set_create_jump_tables(_v=True) -> bool
  """
  return _ida_ida.inf_set_create_jump_tables(*args)

def inf_noflow_to_data(*args):
  """
  inf_noflow_to_data() -> bool
  """
  return _ida_ida.inf_noflow_to_data(*args)

def inf_set_noflow_to_data(*args):
  """
  inf_set_noflow_to_data(_v=True) -> bool
  """
  return _ida_ida.inf_set_noflow_to_data(*args)

def inf_create_all_xrefs(*args):
  """
  inf_create_all_xrefs() -> bool
  """
  return _ida_ida.inf_create_all_xrefs(*args)

def inf_set_create_all_xrefs(*args):
  """
  inf_set_create_all_xrefs(_v=True) -> bool
  """
  return _ida_ida.inf_set_create_all_xrefs(*args)

def inf_del_no_xref_insns(*args):
  """
  inf_del_no_xref_insns() -> bool
  """
  return _ida_ida.inf_del_no_xref_insns(*args)

def inf_set_del_no_xref_insns(*args):
  """
  inf_set_del_no_xref_insns(_v=True) -> bool
  """
  return _ida_ida.inf_set_del_no_xref_insns(*args)

def inf_create_func_from_ptr(*args):
  """
  inf_create_func_from_ptr() -> bool
  """
  return _ida_ida.inf_create_func_from_ptr(*args)

def inf_set_create_func_from_ptr(*args):
  """
  inf_set_create_func_from_ptr(_v=True) -> bool
  """
  return _ida_ida.inf_set_create_func_from_ptr(*args)

def inf_create_func_from_call(*args):
  """
  inf_create_func_from_call() -> bool
  """
  return _ida_ida.inf_create_func_from_call(*args)

def inf_set_create_func_from_call(*args):
  """
  inf_set_create_func_from_call(_v=True) -> bool
  """
  return _ida_ida.inf_set_create_func_from_call(*args)

def inf_create_func_tails(*args):
  """
  inf_create_func_tails() -> bool
  """
  return _ida_ida.inf_create_func_tails(*args)

def inf_set_create_func_tails(*args):
  """
  inf_set_create_func_tails(_v=True) -> bool
  """
  return _ida_ida.inf_set_create_func_tails(*args)

def inf_should_create_stkvars(*args):
  """
  inf_should_create_stkvars() -> bool
  """
  return _ida_ida.inf_should_create_stkvars(*args)

def inf_set_should_create_stkvars(*args):
  """
  inf_set_should_create_stkvars(_v=True) -> bool
  """
  return _ida_ida.inf_set_should_create_stkvars(*args)

def inf_propagate_stkargs(*args):
  """
  inf_propagate_stkargs() -> bool
  """
  return _ida_ida.inf_propagate_stkargs(*args)

def inf_set_propagate_stkargs(*args):
  """
  inf_set_propagate_stkargs(_v=True) -> bool
  """
  return _ida_ida.inf_set_propagate_stkargs(*args)

def inf_propagate_regargs(*args):
  """
  inf_propagate_regargs() -> bool
  """
  return _ida_ida.inf_propagate_regargs(*args)

def inf_set_propagate_regargs(*args):
  """
  inf_set_propagate_regargs(_v=True) -> bool
  """
  return _ida_ida.inf_set_propagate_regargs(*args)

def inf_should_trace_sp(*args):
  """
  inf_should_trace_sp() -> bool
  """
  return _ida_ida.inf_should_trace_sp(*args)

def inf_set_should_trace_sp(*args):
  """
  inf_set_should_trace_sp(_v=True) -> bool
  """
  return _ida_ida.inf_set_should_trace_sp(*args)

def inf_full_sp_ana(*args):
  """
  inf_full_sp_ana() -> bool
  """
  return _ida_ida.inf_full_sp_ana(*args)

def inf_set_full_sp_ana(*args):
  """
  inf_set_full_sp_ana(_v=True) -> bool
  """
  return _ida_ida.inf_set_full_sp_ana(*args)

def inf_noret_ana(*args):
  """
  inf_noret_ana() -> bool
  """
  return _ida_ida.inf_noret_ana(*args)

def inf_set_noret_ana(*args):
  """
  inf_set_noret_ana(_v=True) -> bool
  """
  return _ida_ida.inf_set_noret_ana(*args)

def inf_guess_func_type(*args):
  """
  inf_guess_func_type() -> bool
  """
  return _ida_ida.inf_guess_func_type(*args)

def inf_set_guess_func_type(*args):
  """
  inf_set_guess_func_type(_v=True) -> bool
  """
  return _ida_ida.inf_set_guess_func_type(*args)

def inf_truncate_on_del(*args):
  """
  inf_truncate_on_del() -> bool
  """
  return _ida_ida.inf_truncate_on_del(*args)

def inf_set_truncate_on_del(*args):
  """
  inf_set_truncate_on_del(_v=True) -> bool
  """
  return _ida_ida.inf_set_truncate_on_del(*args)

def inf_create_strlit_on_xref(*args):
  """
  inf_create_strlit_on_xref() -> bool
  """
  return _ida_ida.inf_create_strlit_on_xref(*args)

def inf_set_create_strlit_on_xref(*args):
  """
  inf_set_create_strlit_on_xref(_v=True) -> bool
  """
  return _ida_ida.inf_set_create_strlit_on_xref(*args)

def inf_check_unicode_strlits(*args):
  """
  inf_check_unicode_strlits() -> bool
  """
  return _ida_ida.inf_check_unicode_strlits(*args)

def inf_set_check_unicode_strlits(*args):
  """
  inf_set_check_unicode_strlits(_v=True) -> bool
  """
  return _ida_ida.inf_set_check_unicode_strlits(*args)

def inf_create_off_using_fixup(*args):
  """
  inf_create_off_using_fixup() -> bool
  """
  return _ida_ida.inf_create_off_using_fixup(*args)

def inf_set_create_off_using_fixup(*args):
  """
  inf_set_create_off_using_fixup(_v=True) -> bool
  """
  return _ida_ida.inf_set_create_off_using_fixup(*args)

def inf_create_off_on_dref(*args):
  """
  inf_create_off_on_dref() -> bool
  """
  return _ida_ida.inf_create_off_on_dref(*args)

def inf_set_create_off_on_dref(*args):
  """
  inf_set_create_off_on_dref(_v=True) -> bool
  """
  return _ida_ida.inf_set_create_off_on_dref(*args)

def inf_op_offset(*args):
  """
  inf_op_offset() -> bool
  """
  return _ida_ida.inf_op_offset(*args)

def inf_set_op_offset(*args):
  """
  inf_set_op_offset(_v=True) -> bool
  """
  return _ida_ida.inf_set_op_offset(*args)

def inf_data_offset(*args):
  """
  inf_data_offset() -> bool
  """
  return _ida_ida.inf_data_offset(*args)

def inf_set_data_offset(*args):
  """
  inf_set_data_offset(_v=True) -> bool
  """
  return _ida_ida.inf_set_data_offset(*args)

def inf_use_flirt(*args):
  """
  inf_use_flirt() -> bool
  """
  return _ida_ida.inf_use_flirt(*args)

def inf_set_use_flirt(*args):
  """
  inf_set_use_flirt(_v=True) -> bool
  """
  return _ida_ida.inf_set_use_flirt(*args)

def inf_append_sigcmt(*args):
  """
  inf_append_sigcmt() -> bool
  """
  return _ida_ida.inf_append_sigcmt(*args)

def inf_set_append_sigcmt(*args):
  """
  inf_set_append_sigcmt(_v=True) -> bool
  """
  return _ida_ida.inf_set_append_sigcmt(*args)

def inf_allow_sigmulti(*args):
  """
  inf_allow_sigmulti() -> bool
  """
  return _ida_ida.inf_allow_sigmulti(*args)

def inf_set_allow_sigmulti(*args):
  """
  inf_set_allow_sigmulti(_v=True) -> bool
  """
  return _ida_ida.inf_set_allow_sigmulti(*args)

def inf_hide_libfuncs(*args):
  """
  inf_hide_libfuncs() -> bool
  """
  return _ida_ida.inf_hide_libfuncs(*args)

def inf_set_hide_libfuncs(*args):
  """
  inf_set_hide_libfuncs(_v=True) -> bool
  """
  return _ida_ida.inf_set_hide_libfuncs(*args)

def inf_rename_jumpfunc(*args):
  """
  inf_rename_jumpfunc() -> bool
  """
  return _ida_ida.inf_rename_jumpfunc(*args)

def inf_set_rename_jumpfunc(*args):
  """
  inf_set_rename_jumpfunc(_v=True) -> bool
  """
  return _ida_ida.inf_set_rename_jumpfunc(*args)

def inf_rename_nullsub(*args):
  """
  inf_rename_nullsub() -> bool
  """
  return _ida_ida.inf_rename_nullsub(*args)

def inf_set_rename_nullsub(*args):
  """
  inf_set_rename_nullsub(_v=True) -> bool
  """
  return _ida_ida.inf_set_rename_nullsub(*args)

def inf_coagulate_data(*args):
  """
  inf_coagulate_data() -> bool
  """
  return _ida_ida.inf_coagulate_data(*args)

def inf_set_coagulate_data(*args):
  """
  inf_set_coagulate_data(_v=True) -> bool
  """
  return _ida_ida.inf_set_coagulate_data(*args)

def inf_coagulate_code(*args):
  """
  inf_coagulate_code() -> bool
  """
  return _ida_ida.inf_coagulate_code(*args)

def inf_set_coagulate_code(*args):
  """
  inf_set_coagulate_code(_v=True) -> bool
  """
  return _ida_ida.inf_set_coagulate_code(*args)

def inf_final_pass(*args):
  """
  inf_final_pass() -> bool
  """
  return _ida_ida.inf_final_pass(*args)

def inf_set_final_pass(*args):
  """
  inf_set_final_pass(_v=True) -> bool
  """
  return _ida_ida.inf_set_final_pass(*args)

def inf_get_af2(*args):
  """
  inf_get_af2() -> uint32
  """
  return _ida_ida.inf_get_af2(*args)

def inf_set_af2(*args):
  """
  inf_set_af2(_v) -> bool
  """
  return _ida_ida.inf_set_af2(*args)

def inf_handle_eh(*args):
  """
  inf_handle_eh() -> bool
  """
  return _ida_ida.inf_handle_eh(*args)

def inf_set_handle_eh(*args):
  """
  inf_set_handle_eh(_v=True) -> bool
  """
  return _ida_ida.inf_set_handle_eh(*args)

def inf_handle_rtti(*args):
  """
  inf_handle_rtti() -> bool
  """
  return _ida_ida.inf_handle_rtti(*args)

def inf_set_handle_rtti(*args):
  """
  inf_set_handle_rtti(_v=True) -> bool
  """
  return _ida_ida.inf_set_handle_rtti(*args)

def inf_macros_enabled(*args):
  """
  inf_macros_enabled() -> bool
  """
  return _ida_ida.inf_macros_enabled(*args)

def inf_set_macros_enabled(*args):
  """
  inf_set_macros_enabled(_v=True) -> bool
  """
  return _ida_ida.inf_set_macros_enabled(*args)

def inf_get_baseaddr(*args):
  """
  inf_get_baseaddr() -> uval_t
  """
  return _ida_ida.inf_get_baseaddr(*args)

def inf_set_baseaddr(*args):
  """
  inf_set_baseaddr(_v) -> bool
  """
  return _ida_ida.inf_set_baseaddr(*args)

def inf_get_start_ss(*args):
  """
  inf_get_start_ss() -> sel_t
  """
  return _ida_ida.inf_get_start_ss(*args)

def inf_set_start_ss(*args):
  """
  inf_set_start_ss(_v) -> bool
  """
  return _ida_ida.inf_set_start_ss(*args)

def inf_get_start_cs(*args):
  """
  inf_get_start_cs() -> sel_t
  """
  return _ida_ida.inf_get_start_cs(*args)

def inf_set_start_cs(*args):
  """
  inf_set_start_cs(_v) -> bool
  """
  return _ida_ida.inf_set_start_cs(*args)

def inf_get_start_ip(*args):
  """
  inf_get_start_ip() -> ea_t
  """
  return _ida_ida.inf_get_start_ip(*args)

def inf_set_start_ip(*args):
  """
  inf_set_start_ip(_v) -> bool
  """
  return _ida_ida.inf_set_start_ip(*args)

def inf_get_start_ea(*args):
  """
  inf_get_start_ea() -> ea_t
  """
  return _ida_ida.inf_get_start_ea(*args)

def inf_set_start_ea(*args):
  """
  inf_set_start_ea(_v) -> bool
  """
  return _ida_ida.inf_set_start_ea(*args)

def inf_get_start_sp(*args):
  """
  inf_get_start_sp() -> ea_t
  """
  return _ida_ida.inf_get_start_sp(*args)

def inf_set_start_sp(*args):
  """
  inf_set_start_sp(_v) -> bool
  """
  return _ida_ida.inf_set_start_sp(*args)

def inf_get_main(*args):
  """
  inf_get_main() -> ea_t
  """
  return _ida_ida.inf_get_main(*args)

def inf_set_main(*args):
  """
  inf_set_main(_v) -> bool
  """
  return _ida_ida.inf_set_main(*args)

def inf_get_min_ea(*args):
  """
  inf_get_min_ea() -> ea_t
  """
  return _ida_ida.inf_get_min_ea(*args)

def inf_set_min_ea(*args):
  """
  inf_set_min_ea(_v) -> bool
  """
  return _ida_ida.inf_set_min_ea(*args)

def inf_get_max_ea(*args):
  """
  inf_get_max_ea() -> ea_t
  """
  return _ida_ida.inf_get_max_ea(*args)

def inf_set_max_ea(*args):
  """
  inf_set_max_ea(_v) -> bool
  """
  return _ida_ida.inf_set_max_ea(*args)

def inf_get_omin_ea(*args):
  """
  inf_get_omin_ea() -> ea_t
  """
  return _ida_ida.inf_get_omin_ea(*args)

def inf_set_omin_ea(*args):
  """
  inf_set_omin_ea(_v) -> bool
  """
  return _ida_ida.inf_set_omin_ea(*args)

def inf_get_omax_ea(*args):
  """
  inf_get_omax_ea() -> ea_t
  """
  return _ida_ida.inf_get_omax_ea(*args)

def inf_set_omax_ea(*args):
  """
  inf_set_omax_ea(_v) -> bool
  """
  return _ida_ida.inf_set_omax_ea(*args)

def inf_get_lowoff(*args):
  """
  inf_get_lowoff() -> ea_t
  """
  return _ida_ida.inf_get_lowoff(*args)

def inf_set_lowoff(*args):
  """
  inf_set_lowoff(_v) -> bool
  """
  return _ida_ida.inf_set_lowoff(*args)

def inf_get_highoff(*args):
  """
  inf_get_highoff() -> ea_t
  """
  return _ida_ida.inf_get_highoff(*args)

def inf_set_highoff(*args):
  """
  inf_set_highoff(_v) -> bool
  """
  return _ida_ida.inf_set_highoff(*args)

def inf_get_maxref(*args):
  """
  inf_get_maxref() -> uval_t
  """
  return _ida_ida.inf_get_maxref(*args)

def inf_set_maxref(*args):
  """
  inf_set_maxref(_v) -> bool
  """
  return _ida_ida.inf_set_maxref(*args)

def inf_get_netdelta(*args):
  """
  inf_get_netdelta() -> sval_t
  """
  return _ida_ida.inf_get_netdelta(*args)

def inf_set_netdelta(*args):
  """
  inf_set_netdelta(_v) -> bool
  """
  return _ida_ida.inf_set_netdelta(*args)

def inf_get_xrefnum(*args):
  """
  inf_get_xrefnum() -> uchar
  """
  return _ida_ida.inf_get_xrefnum(*args)

def inf_set_xrefnum(*args):
  """
  inf_set_xrefnum(_v) -> bool
  """
  return _ida_ida.inf_set_xrefnum(*args)

def inf_get_type_xrefnum(*args):
  """
  inf_get_type_xrefnum() -> uchar
  """
  return _ida_ida.inf_get_type_xrefnum(*args)

def inf_set_type_xrefnum(*args):
  """
  inf_set_type_xrefnum(_v) -> bool
  """
  return _ida_ida.inf_set_type_xrefnum(*args)

def inf_get_refcmtnum(*args):
  """
  inf_get_refcmtnum() -> uchar
  """
  return _ida_ida.inf_get_refcmtnum(*args)

def inf_set_refcmtnum(*args):
  """
  inf_set_refcmtnum(_v) -> bool
  """
  return _ida_ida.inf_set_refcmtnum(*args)

def inf_get_xrefflag(*args):
  """
  inf_get_xrefflag() -> uchar
  """
  return _ida_ida.inf_get_xrefflag(*args)

def inf_set_xrefflag(*args):
  """
  inf_set_xrefflag(_v) -> bool
  """
  return _ida_ida.inf_set_xrefflag(*args)

def inf_show_xref_seg(*args):
  """
  inf_show_xref_seg() -> bool
  """
  return _ida_ida.inf_show_xref_seg(*args)

def inf_set_show_xref_seg(*args):
  """
  inf_set_show_xref_seg(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_xref_seg(*args)

def inf_show_xref_tmarks(*args):
  """
  inf_show_xref_tmarks() -> bool
  """
  return _ida_ida.inf_show_xref_tmarks(*args)

def inf_set_show_xref_tmarks(*args):
  """
  inf_set_show_xref_tmarks(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_xref_tmarks(*args)

def inf_show_xref_fncoff(*args):
  """
  inf_show_xref_fncoff() -> bool
  """
  return _ida_ida.inf_show_xref_fncoff(*args)

def inf_set_show_xref_fncoff(*args):
  """
  inf_set_show_xref_fncoff(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_xref_fncoff(*args)

def inf_show_xref_val(*args):
  """
  inf_show_xref_val() -> bool
  """
  return _ida_ida.inf_show_xref_val(*args)

def inf_set_show_xref_val(*args):
  """
  inf_set_show_xref_val(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_xref_val(*args)

def inf_get_max_autoname_len(*args):
  """
  inf_get_max_autoname_len() -> ushort
  """
  return _ida_ida.inf_get_max_autoname_len(*args)

def inf_set_max_autoname_len(*args):
  """
  inf_set_max_autoname_len(_v) -> bool
  """
  return _ida_ida.inf_set_max_autoname_len(*args)

def inf_get_nametype(*args):
  """
  inf_get_nametype() -> char
  """
  return _ida_ida.inf_get_nametype(*args)

def inf_set_nametype(*args):
  """
  inf_set_nametype(_v) -> bool
  """
  return _ida_ida.inf_set_nametype(*args)

def inf_get_short_demnames(*args):
  """
  inf_get_short_demnames() -> uint32
  """
  return _ida_ida.inf_get_short_demnames(*args)

def inf_set_short_demnames(*args):
  """
  inf_set_short_demnames(_v) -> bool
  """
  return _ida_ida.inf_set_short_demnames(*args)

def inf_get_long_demnames(*args):
  """
  inf_get_long_demnames() -> uint32
  """
  return _ida_ida.inf_get_long_demnames(*args)

def inf_set_long_demnames(*args):
  """
  inf_set_long_demnames(_v) -> bool
  """
  return _ida_ida.inf_set_long_demnames(*args)

def inf_get_demnames(*args):
  """
  inf_get_demnames() -> uchar
  """
  return _ida_ida.inf_get_demnames(*args)

def inf_set_demnames(*args):
  """
  inf_set_demnames(_v) -> bool
  """
  return _ida_ida.inf_set_demnames(*args)

def inf_get_listnames(*args):
  """
  inf_get_listnames() -> uchar
  """
  return _ida_ida.inf_get_listnames(*args)

def inf_set_listnames(*args):
  """
  inf_set_listnames(_v) -> bool
  """
  return _ida_ida.inf_set_listnames(*args)

def inf_get_indent(*args):
  """
  inf_get_indent() -> uchar
  """
  return _ida_ida.inf_get_indent(*args)

def inf_set_indent(*args):
  """
  inf_set_indent(_v) -> bool
  """
  return _ida_ida.inf_set_indent(*args)

def inf_get_comment(*args):
  """
  inf_get_comment() -> uchar
  """
  return _ida_ida.inf_get_comment(*args)

def inf_set_comment(*args):
  """
  inf_set_comment(_v) -> bool
  """
  return _ida_ida.inf_set_comment(*args)

def inf_get_margin(*args):
  """
  inf_get_margin() -> ushort
  """
  return _ida_ida.inf_get_margin(*args)

def inf_set_margin(*args):
  """
  inf_set_margin(_v) -> bool
  """
  return _ida_ida.inf_set_margin(*args)

def inf_get_lenxref(*args):
  """
  inf_get_lenxref() -> ushort
  """
  return _ida_ida.inf_get_lenxref(*args)

def inf_set_lenxref(*args):
  """
  inf_set_lenxref(_v) -> bool
  """
  return _ida_ida.inf_set_lenxref(*args)

def inf_get_outflags(*args):
  """
  inf_get_outflags() -> uint32
  """
  return _ida_ida.inf_get_outflags(*args)

def inf_set_outflags(*args):
  """
  inf_set_outflags(_v) -> bool
  """
  return _ida_ida.inf_set_outflags(*args)

def inf_show_void(*args):
  """
  inf_show_void() -> bool
  """
  return _ida_ida.inf_show_void(*args)

def inf_set_show_void(*args):
  """
  inf_set_show_void(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_void(*args)

def inf_show_auto(*args):
  """
  inf_show_auto() -> bool
  """
  return _ida_ida.inf_show_auto(*args)

def inf_set_show_auto(*args):
  """
  inf_set_show_auto(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_auto(*args)

def inf_gen_null(*args):
  """
  inf_gen_null() -> bool
  """
  return _ida_ida.inf_gen_null(*args)

def inf_set_gen_null(*args):
  """
  inf_set_gen_null(_v=True) -> bool
  """
  return _ida_ida.inf_set_gen_null(*args)

def inf_show_line_pref(*args):
  """
  inf_show_line_pref() -> bool
  """
  return _ida_ida.inf_show_line_pref(*args)

def inf_set_show_line_pref(*args):
  """
  inf_set_show_line_pref(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_line_pref(*args)

def inf_line_pref_with_seg(*args):
  """
  inf_line_pref_with_seg() -> bool
  """
  return _ida_ida.inf_line_pref_with_seg(*args)

def inf_set_line_pref_with_seg(*args):
  """
  inf_set_line_pref_with_seg(_v=True) -> bool
  """
  return _ida_ida.inf_set_line_pref_with_seg(*args)

def inf_gen_lzero(*args):
  """
  inf_gen_lzero() -> bool
  """
  return _ida_ida.inf_gen_lzero(*args)

def inf_set_gen_lzero(*args):
  """
  inf_set_gen_lzero(_v=True) -> bool
  """
  return _ida_ida.inf_set_gen_lzero(*args)

def inf_gen_org(*args):
  """
  inf_gen_org() -> bool
  """
  return _ida_ida.inf_gen_org(*args)

def inf_set_gen_org(*args):
  """
  inf_set_gen_org(_v=True) -> bool
  """
  return _ida_ida.inf_set_gen_org(*args)

def inf_gen_assume(*args):
  """
  inf_gen_assume() -> bool
  """
  return _ida_ida.inf_gen_assume(*args)

def inf_set_gen_assume(*args):
  """
  inf_set_gen_assume(_v=True) -> bool
  """
  return _ida_ida.inf_set_gen_assume(*args)

def inf_gen_tryblks(*args):
  """
  inf_gen_tryblks() -> bool
  """
  return _ida_ida.inf_gen_tryblks(*args)

def inf_set_gen_tryblks(*args):
  """
  inf_set_gen_tryblks(_v=True) -> bool
  """
  return _ida_ida.inf_set_gen_tryblks(*args)

def inf_get_cmtflg(*args):
  """
  inf_get_cmtflg() -> uchar
  """
  return _ida_ida.inf_get_cmtflg(*args)

def inf_set_cmtflg(*args):
  """
  inf_set_cmtflg(_v) -> bool
  """
  return _ida_ida.inf_set_cmtflg(*args)

def inf_show_repeatables(*args):
  """
  inf_show_repeatables() -> bool
  """
  return _ida_ida.inf_show_repeatables(*args)

def inf_set_show_repeatables(*args):
  """
  inf_set_show_repeatables(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_repeatables(*args)

def inf_show_all_comments(*args):
  """
  inf_show_all_comments() -> bool
  """
  return _ida_ida.inf_show_all_comments(*args)

def inf_set_show_all_comments(*args):
  """
  inf_set_show_all_comments(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_all_comments(*args)

def inf_hide_comments(*args):
  """
  inf_hide_comments() -> bool
  """
  return _ida_ida.inf_hide_comments(*args)

def inf_set_hide_comments(*args):
  """
  inf_set_hide_comments(_v=True) -> bool
  """
  return _ida_ida.inf_set_hide_comments(*args)

def inf_show_src_linnum(*args):
  """
  inf_show_src_linnum() -> bool
  """
  return _ida_ida.inf_show_src_linnum(*args)

def inf_set_show_src_linnum(*args):
  """
  inf_set_show_src_linnum(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_src_linnum(*args)

def inf_test_mode(*args):
  """
  inf_test_mode() -> bool
  """
  return _ida_ida.inf_test_mode(*args)

def inf_set_test_mode(*args):
  """
  inf_set_test_mode(_v=True) -> bool
  """
  return _ida_ida.inf_set_test_mode(*args)

def inf_show_hidden_insns(*args):
  """
  inf_show_hidden_insns() -> bool
  """
  return _ida_ida.inf_show_hidden_insns(*args)

def inf_set_show_hidden_insns(*args):
  """
  inf_set_show_hidden_insns(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_hidden_insns(*args)

def inf_show_hidden_funcs(*args):
  """
  inf_show_hidden_funcs() -> bool
  """
  return _ida_ida.inf_show_hidden_funcs(*args)

def inf_set_show_hidden_funcs(*args):
  """
  inf_set_show_hidden_funcs(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_hidden_funcs(*args)

def inf_show_hidden_segms(*args):
  """
  inf_show_hidden_segms() -> bool
  """
  return _ida_ida.inf_show_hidden_segms(*args)

def inf_set_show_hidden_segms(*args):
  """
  inf_set_show_hidden_segms(_v=True) -> bool
  """
  return _ida_ida.inf_set_show_hidden_segms(*args)

def inf_get_limiter(*args):
  """
  inf_get_limiter() -> uchar
  """
  return _ida_ida.inf_get_limiter(*args)

def inf_set_limiter(*args):
  """
  inf_set_limiter(_v) -> bool
  """
  return _ida_ida.inf_set_limiter(*args)

def inf_is_limiter_thin(*args):
  """
  inf_is_limiter_thin() -> bool
  """
  return _ida_ida.inf_is_limiter_thin(*args)

def inf_set_limiter_thin(*args):
  """
  inf_set_limiter_thin(_v=True) -> bool
  """
  return _ida_ida.inf_set_limiter_thin(*args)

def inf_is_limiter_thick(*args):
  """
  inf_is_limiter_thick() -> bool
  """
  return _ida_ida.inf_is_limiter_thick(*args)

def inf_set_limiter_thick(*args):
  """
  inf_set_limiter_thick(_v=True) -> bool
  """
  return _ida_ida.inf_set_limiter_thick(*args)

def inf_is_limiter_empty(*args):
  """
  inf_is_limiter_empty() -> bool
  """
  return _ida_ida.inf_is_limiter_empty(*args)

def inf_set_limiter_empty(*args):
  """
  inf_set_limiter_empty(_v=True) -> bool
  """
  return _ida_ida.inf_set_limiter_empty(*args)

def inf_get_bin_prefix_size(*args):
  """
  inf_get_bin_prefix_size() -> short
  """
  return _ida_ida.inf_get_bin_prefix_size(*args)

def inf_set_bin_prefix_size(*args):
  """
  inf_set_bin_prefix_size(_v) -> bool
  """
  return _ida_ida.inf_set_bin_prefix_size(*args)

def inf_get_prefflag(*args):
  """
  inf_get_prefflag() -> uchar
  """
  return _ida_ida.inf_get_prefflag(*args)

def inf_set_prefflag(*args):
  """
  inf_set_prefflag(_v) -> bool
  """
  return _ida_ida.inf_set_prefflag(*args)

def inf_prefix_show_segaddr(*args):
  """
  inf_prefix_show_segaddr() -> bool
  """
  return _ida_ida.inf_prefix_show_segaddr(*args)

def inf_set_prefix_show_segaddr(*args):
  """
  inf_set_prefix_show_segaddr(_v=True) -> bool
  """
  return _ida_ida.inf_set_prefix_show_segaddr(*args)

def inf_prefix_show_funcoff(*args):
  """
  inf_prefix_show_funcoff() -> bool
  """
  return _ida_ida.inf_prefix_show_funcoff(*args)

def inf_set_prefix_show_funcoff(*args):
  """
  inf_set_prefix_show_funcoff(_v=True) -> bool
  """
  return _ida_ida.inf_set_prefix_show_funcoff(*args)

def inf_prefix_show_stack(*args):
  """
  inf_prefix_show_stack() -> bool
  """
  return _ida_ida.inf_prefix_show_stack(*args)

def inf_set_prefix_show_stack(*args):
  """
  inf_set_prefix_show_stack(_v=True) -> bool
  """
  return _ida_ida.inf_set_prefix_show_stack(*args)

def inf_get_strlit_flags(*args):
  """
  inf_get_strlit_flags() -> uchar
  """
  return _ida_ida.inf_get_strlit_flags(*args)

def inf_set_strlit_flags(*args):
  """
  inf_set_strlit_flags(_v) -> bool
  """
  return _ida_ida.inf_set_strlit_flags(*args)

def inf_strlit_names(*args):
  """
  inf_strlit_names() -> bool
  """
  return _ida_ida.inf_strlit_names(*args)

def inf_set_strlit_names(*args):
  """
  inf_set_strlit_names(_v=True) -> bool
  """
  return _ida_ida.inf_set_strlit_names(*args)

def inf_strlit_name_bit(*args):
  """
  inf_strlit_name_bit() -> bool
  """
  return _ida_ida.inf_strlit_name_bit(*args)

def inf_set_strlit_name_bit(*args):
  """
  inf_set_strlit_name_bit(_v=True) -> bool
  """
  return _ida_ida.inf_set_strlit_name_bit(*args)

def inf_strlit_serial_names(*args):
  """
  inf_strlit_serial_names() -> bool
  """
  return _ida_ida.inf_strlit_serial_names(*args)

def inf_set_strlit_serial_names(*args):
  """
  inf_set_strlit_serial_names(_v=True) -> bool
  """
  return _ida_ida.inf_set_strlit_serial_names(*args)

def inf_unicode_strlits(*args):
  """
  inf_unicode_strlits() -> bool
  """
  return _ida_ida.inf_unicode_strlits(*args)

def inf_set_unicode_strlits(*args):
  """
  inf_set_unicode_strlits(_v=True) -> bool
  """
  return _ida_ida.inf_set_unicode_strlits(*args)

def inf_strlit_autocmt(*args):
  """
  inf_strlit_autocmt() -> bool
  """
  return _ida_ida.inf_strlit_autocmt(*args)

def inf_set_strlit_autocmt(*args):
  """
  inf_set_strlit_autocmt(_v=True) -> bool
  """
  return _ida_ida.inf_set_strlit_autocmt(*args)

def inf_strlit_savecase(*args):
  """
  inf_strlit_savecase() -> bool
  """
  return _ida_ida.inf_strlit_savecase(*args)

def inf_set_strlit_savecase(*args):
  """
  inf_set_strlit_savecase(_v=True) -> bool
  """
  return _ida_ida.inf_set_strlit_savecase(*args)

def inf_get_strlit_break(*args):
  """
  inf_get_strlit_break() -> uchar
  """
  return _ida_ida.inf_get_strlit_break(*args)

def inf_set_strlit_break(*args):
  """
  inf_set_strlit_break(_v) -> bool
  """
  return _ida_ida.inf_set_strlit_break(*args)

def inf_get_strlit_zeroes(*args):
  """
  inf_get_strlit_zeroes() -> char
  """
  return _ida_ida.inf_get_strlit_zeroes(*args)

def inf_set_strlit_zeroes(*args):
  """
  inf_set_strlit_zeroes(_v) -> bool
  """
  return _ida_ida.inf_set_strlit_zeroes(*args)

def inf_get_strtype(*args):
  """
  inf_get_strtype() -> int32
  """
  return _ida_ida.inf_get_strtype(*args)

def inf_set_strtype(*args):
  """
  inf_set_strtype(_v) -> bool
  """
  return _ida_ida.inf_set_strtype(*args)

def inf_get_strlit_sernum(*args):
  """
  inf_get_strlit_sernum() -> uval_t
  """
  return _ida_ida.inf_get_strlit_sernum(*args)

def inf_set_strlit_sernum(*args):
  """
  inf_set_strlit_sernum(_v) -> bool
  """
  return _ida_ida.inf_set_strlit_sernum(*args)

def inf_get_datatypes(*args):
  """
  inf_get_datatypes() -> uval_t
  """
  return _ida_ida.inf_get_datatypes(*args)

def inf_set_datatypes(*args):
  """
  inf_set_datatypes(_v) -> bool
  """
  return _ida_ida.inf_set_datatypes(*args)

def inf_get_abibits(*args):
  """
  inf_get_abibits() -> uint32
  """
  return _ida_ida.inf_get_abibits(*args)

def inf_set_abibits(*args):
  """
  inf_set_abibits(_v) -> bool
  """
  return _ida_ida.inf_set_abibits(*args)

def inf_is_mem_aligned4(*args):
  """
  inf_is_mem_aligned4() -> bool
  """
  return _ida_ida.inf_is_mem_aligned4(*args)

def inf_set_mem_aligned4(*args):
  """
  inf_set_mem_aligned4(_v=True) -> bool
  """
  return _ida_ida.inf_set_mem_aligned4(*args)

def inf_pack_stkargs(*args):
  """
  inf_pack_stkargs() -> bool
  """
  return _ida_ida.inf_pack_stkargs(*args)

def inf_set_pack_stkargs(*args):
  """
  inf_set_pack_stkargs(_v=True) -> bool
  """
  return _ida_ida.inf_set_pack_stkargs(*args)

def inf_big_arg_align(*args):
  """
  inf_big_arg_align() -> bool
  """
  return _ida_ida.inf_big_arg_align(*args)

def inf_set_big_arg_align(*args):
  """
  inf_set_big_arg_align(_v=True) -> bool
  """
  return _ida_ida.inf_set_big_arg_align(*args)

def inf_stack_ldbl(*args):
  """
  inf_stack_ldbl() -> bool
  """
  return _ida_ida.inf_stack_ldbl(*args)

def inf_set_stack_ldbl(*args):
  """
  inf_set_stack_ldbl(_v=True) -> bool
  """
  return _ida_ida.inf_set_stack_ldbl(*args)

def inf_stack_varargs(*args):
  """
  inf_stack_varargs() -> bool
  """
  return _ida_ida.inf_stack_varargs(*args)

def inf_set_stack_varargs(*args):
  """
  inf_set_stack_varargs(_v=True) -> bool
  """
  return _ida_ida.inf_set_stack_varargs(*args)

def inf_is_hard_float(*args):
  """
  inf_is_hard_float() -> bool
  """
  return _ida_ida.inf_is_hard_float(*args)

def inf_set_hard_float(*args):
  """
  inf_set_hard_float(_v=True) -> bool
  """
  return _ida_ida.inf_set_hard_float(*args)

def inf_abi_set_by_user(*args):
  """
  inf_abi_set_by_user() -> bool
  """
  return _ida_ida.inf_abi_set_by_user(*args)

def inf_set_abi_set_by_user(*args):
  """
  inf_set_abi_set_by_user(_v=True) -> bool
  """
  return _ida_ida.inf_set_abi_set_by_user(*args)

def inf_use_gcc_layout(*args):
  """
  inf_use_gcc_layout() -> bool
  """
  return _ida_ida.inf_use_gcc_layout(*args)

def inf_set_use_gcc_layout(*args):
  """
  inf_set_use_gcc_layout(_v=True) -> bool
  """
  return _ida_ida.inf_set_use_gcc_layout(*args)

def inf_map_stkargs(*args):
  """
  inf_map_stkargs() -> bool
  """
  return _ida_ida.inf_map_stkargs(*args)

def inf_set_map_stkargs(*args):
  """
  inf_set_map_stkargs(_v=True) -> bool
  """
  return _ida_ida.inf_set_map_stkargs(*args)

def inf_get_appcall_options(*args):
  """
  inf_get_appcall_options() -> uint32
  """
  return _ida_ida.inf_get_appcall_options(*args)

def inf_set_appcall_options(*args):
  """
  inf_set_appcall_options(_v) -> bool
  """
  return _ida_ida.inf_set_appcall_options(*args)

def inf_get_privrange_start_ea(*args):
  """
  inf_get_privrange_start_ea() -> ea_t
  """
  return _ida_ida.inf_get_privrange_start_ea(*args)

def inf_set_privrange_start_ea(*args):
  """
  inf_set_privrange_start_ea(_v) -> bool
  """
  return _ida_ida.inf_set_privrange_start_ea(*args)

def inf_get_privrange_end_ea(*args):
  """
  inf_get_privrange_end_ea() -> ea_t
  """
  return _ida_ida.inf_get_privrange_end_ea(*args)

def inf_set_privrange_end_ea(*args):
  """
  inf_set_privrange_end_ea(_v) -> bool
  """
  return _ida_ida.inf_set_privrange_end_ea(*args)

def inf_get_cc_id(*args):
  """
  inf_get_cc_id() -> comp_t
  """
  return _ida_ida.inf_get_cc_id(*args)

def inf_set_cc_id(*args):
  """
  inf_set_cc_id(_v) -> bool
  """
  return _ida_ida.inf_set_cc_id(*args)

def inf_get_cc_cm(*args):
  """
  inf_get_cc_cm() -> cm_t
  """
  return _ida_ida.inf_get_cc_cm(*args)

def inf_set_cc_cm(*args):
  """
  inf_set_cc_cm(_v) -> bool
  """
  return _ida_ida.inf_set_cc_cm(*args)

def inf_get_cc_size_i(*args):
  """
  inf_get_cc_size_i() -> uchar
  """
  return _ida_ida.inf_get_cc_size_i(*args)

def inf_set_cc_size_i(*args):
  """
  inf_set_cc_size_i(_v) -> bool
  """
  return _ida_ida.inf_set_cc_size_i(*args)

def inf_get_cc_size_b(*args):
  """
  inf_get_cc_size_b() -> uchar
  """
  return _ida_ida.inf_get_cc_size_b(*args)

def inf_set_cc_size_b(*args):
  """
  inf_set_cc_size_b(_v) -> bool
  """
  return _ida_ida.inf_set_cc_size_b(*args)

def inf_get_cc_size_e(*args):
  """
  inf_get_cc_size_e() -> uchar
  """
  return _ida_ida.inf_get_cc_size_e(*args)

def inf_set_cc_size_e(*args):
  """
  inf_set_cc_size_e(_v) -> bool
  """
  return _ida_ida.inf_set_cc_size_e(*args)

def inf_get_cc_defalign(*args):
  """
  inf_get_cc_defalign() -> uchar
  """
  return _ida_ida.inf_get_cc_defalign(*args)

def inf_set_cc_defalign(*args):
  """
  inf_set_cc_defalign(_v) -> bool
  """
  return _ida_ida.inf_set_cc_defalign(*args)

def inf_get_cc_size_s(*args):
  """
  inf_get_cc_size_s() -> uchar
  """
  return _ida_ida.inf_get_cc_size_s(*args)

def inf_set_cc_size_s(*args):
  """
  inf_set_cc_size_s(_v) -> bool
  """
  return _ida_ida.inf_set_cc_size_s(*args)

def inf_get_cc_size_l(*args):
  """
  inf_get_cc_size_l() -> uchar
  """
  return _ida_ida.inf_get_cc_size_l(*args)

def inf_set_cc_size_l(*args):
  """
  inf_set_cc_size_l(_v) -> bool
  """
  return _ida_ida.inf_set_cc_size_l(*args)

def inf_get_cc_size_ll(*args):
  """
  inf_get_cc_size_ll() -> uchar
  """
  return _ida_ida.inf_get_cc_size_ll(*args)

def inf_set_cc_size_ll(*args):
  """
  inf_set_cc_size_ll(_v) -> bool
  """
  return _ida_ida.inf_set_cc_size_ll(*args)

def inf_get_cc_size_ldbl(*args):
  """
  inf_get_cc_size_ldbl() -> uchar
  """
  return _ida_ida.inf_get_cc_size_ldbl(*args)

def inf_set_cc_size_ldbl(*args):
  """
  inf_set_cc_size_ldbl(_v) -> bool
  """
  return _ida_ida.inf_set_cc_size_ldbl(*args)

def inf_get_procname(*args):
  """
  inf_get_procname() -> bool
  """
  return _ida_ida.inf_get_procname(*args)

def inf_set_procname(*args):
  """
  inf_set_procname(_v, len=size_t(-1)) -> bool
  """
  return _ida_ida.inf_set_procname(*args)

def inf_get_strlit_pref(*args):
  """
  inf_get_strlit_pref() -> bool
  """
  return _ida_ida.inf_get_strlit_pref(*args)

def inf_set_strlit_pref(*args):
  """
  inf_set_strlit_pref(_v, len=size_t(-1)) -> bool
  """
  return _ida_ida.inf_set_strlit_pref(*args)

def inf_get_cc(*args):
  """
  inf_get_cc(out) -> bool
  """
  return _ida_ida.inf_get_cc(*args)

def inf_set_cc(*args):
  """
  inf_set_cc(_v) -> bool
  """
  return _ida_ida.inf_set_cc(*args)

def inf_set_privrange(*args):
  """
  inf_set_privrange(_v) -> bool
  """
  return _ida_ida.inf_set_privrange(*args)

def inf_get_privrange(*args):
  """
    inf_get_privrange(out) -> bool
    inf_get_privrange() -> range_t
    """
  return _ida_ida.inf_get_privrange(*args)

def inf_get_af_low(*args):
  """
  inf_get_af_low() -> ushort


  Get/set low/high 16bit halves of inf.af.
  """
  return _ida_ida.inf_get_af_low(*args)

def inf_set_af_low(*args):
  """
  inf_set_af_low(saf)
  """
  return _ida_ida.inf_set_af_low(*args)

def inf_get_af_high(*args):
  """
  inf_get_af_high() -> ushort
  """
  return _ida_ida.inf_get_af_high(*args)

def inf_set_af_high(*args):
  """
  inf_set_af_high(saf2)
  """
  return _ida_ida.inf_set_af_high(*args)

def inf_get_af2_low(*args):
  """
  inf_get_af2_low() -> ushort


  Get/set low 16bit half of inf.af2.
  """
  return _ida_ida.inf_get_af2_low(*args)

def inf_set_af2_low(*args):
  """
  inf_set_af2_low(saf)
  """
  return _ida_ida.inf_set_af2_low(*args)

def inf_get_pack_mode(*args):
  """
  inf_get_pack_mode() -> int
  """
  return _ida_ida.inf_get_pack_mode(*args)

def inf_set_pack_mode(*args):
  """
  inf_set_pack_mode(pack_mode) -> int
  """
  return _ida_ida.inf_set_pack_mode(*args)

def inf_inc_database_change_count(*args):
  """
  inf_inc_database_change_count(cnt=1)
  """
  return _ida_ida.inf_inc_database_change_count(*args)

def inf_get_demname_form(*args):
  """
  inf_get_demname_form() -> uchar


  Get 'DEMNAM_MASK' bits of #demnames.
  """
  return _ida_ida.inf_get_demname_form(*args)

def inf_postinc_strlit_sernum(*args):
  """
  inf_postinc_strlit_sernum(cnt=1) -> uval_t
  """
  return _ida_ida.inf_postinc_strlit_sernum(*args)

def inf_like_binary(*args):
  """
  inf_like_binary() -> bool
  """
  return _ida_ida.inf_like_binary(*args)
UA_MAXOP = _ida_ida.UA_MAXOP
"""
max number of operands allowed for an instruction
"""

def calc_default_idaplace_flags(*args):
  """
  calc_default_idaplace_flags() -> int


  Get default disassembly line options.
  """
  return _ida_ida.calc_default_idaplace_flags(*args)
MAXADDR = _ida_ida.MAXADDR

def to_ea(*args):
  """
  to_ea(reg_cs, reg_ip) -> ea_t


  Convert (seg,off) value to a linear address.
  
  
  @param reg_cs (C++: sel_t)
  @param reg_ip (C++: ea_t)
  """
  return _ida_ida.to_ea(*args)
IDB_EXT32 = _ida_ida.IDB_EXT32
IDB_EXT64 = _ida_ida.IDB_EXT64
IDB_EXT = _ida_ida.IDB_EXT
#<pycode(py_ida)>
def __make_idainfo_bound(func, attr):
    def __func(self, *args):
        return func(*args)
    setattr(idainfo, attr, __func)

_NO_SETTER = "<nosetter>"
def __make_idainfo_accessors(
        attr,
        getter_name=None,
        setter_name=None):
    if getter_name is None:
        getter_name = attr
    getter = globals()["idainfo_%s" % getter_name]
    __make_idainfo_bound(getter, getter_name)
    if setter_name != _NO_SETTER:
        if setter_name is None:
            setter_name = "set_%s" % attr
        setter = globals()["idainfo_%s" % setter_name]
        __make_idainfo_bound(setter, setter_name)

def __make_idainfo_getter(name):
    return __make_idainfo_accessors(None, getter_name=name, setter_name=_NO_SETTER)


idainfo_big_arg_align = inf_big_arg_align
__make_idainfo_getter("big_arg_align")

idainfo_gen_null = inf_gen_null
idainfo_set_gen_null = inf_set_gen_null
__make_idainfo_accessors("gen_null")

idainfo_gen_lzero = inf_gen_lzero
idainfo_set_gen_lzero = inf_set_gen_lzero
__make_idainfo_accessors("gen_lzero")

idainfo_gen_tryblks = inf_gen_tryblks
idainfo_set_gen_tryblks = inf_set_gen_tryblks
__make_idainfo_accessors("gen_tryblks")

idainfo_get_demname_form = inf_get_demname_form
__make_idainfo_getter("get_demname_form")

idainfo_get_pack_mode = inf_get_pack_mode
idainfo_set_pack_mode = inf_set_pack_mode
__make_idainfo_accessors(None, "get_pack_mode", "set_pack_mode")

idainfo_is_32bit = inf_is_32bit
__make_idainfo_getter("is_32bit")

idainfo_is_64bit = inf_is_64bit
idainfo_set_64bit = inf_set_64bit
__make_idainfo_accessors(None, "is_64bit", "set_64bit")

idainfo_is_auto_enabled = inf_is_auto_enabled
idainfo_set_auto_enabled = inf_set_auto_enabled
__make_idainfo_accessors(None, "is_auto_enabled", "set_auto_enabled")

idainfo_is_be = inf_is_be
idainfo_set_be = inf_set_be
__make_idainfo_accessors(None, "is_be", "set_be")

idainfo_is_dll = inf_is_dll
__make_idainfo_getter("is_dll")

idainfo_is_flat_off32 = inf_is_flat_off32
__make_idainfo_getter("is_flat_off32")

idainfo_is_graph_view = inf_is_graph_view
idainfo_set_graph_view = inf_set_graph_view
__make_idainfo_accessors(None, "is_graph_view", "set_graph_view")

idainfo_is_hard_float = inf_is_hard_float
__make_idainfo_getter("is_hard_float")

idainfo_is_kernel_mode = inf_is_kernel_mode
__make_idainfo_getter("is_kernel_mode")

idainfo_is_mem_aligned4 = inf_is_mem_aligned4
__make_idainfo_getter("is_mem_aligned4")

idainfo_is_snapshot = inf_is_snapshot
__make_idainfo_getter("is_snapshot")

idainfo_is_wide_high_byte_first = inf_is_wide_high_byte_first
idainfo_set_wide_high_byte_first = inf_set_wide_high_byte_first
__make_idainfo_accessors(None, "is_wide_high_byte_first", "set_wide_high_byte_first")

idainfo_like_binary = inf_like_binary
__make_idainfo_getter("like_binary")

idainfo_line_pref_with_seg = inf_line_pref_with_seg
idainfo_set_line_pref_with_seg = inf_set_line_pref_with_seg
__make_idainfo_accessors("line_pref_with_seg")

idainfo_show_auto = inf_show_auto
idainfo_set_show_auto = inf_set_show_auto
__make_idainfo_accessors("show_auto")

idainfo_show_line_pref = inf_show_line_pref
idainfo_set_show_line_pref = inf_set_show_line_pref
__make_idainfo_accessors("show_line_pref")

idainfo_show_void = inf_show_void
idainfo_set_show_void = inf_set_show_void
__make_idainfo_accessors("show_void")

idainfo_loading_idc = inf_loading_idc
__make_idainfo_getter("loading_idc")

idainfo_map_stkargs = inf_map_stkargs
__make_idainfo_getter("map_stkargs")

idainfo_pack_stkargs = inf_pack_stkargs
__make_idainfo_getter("pack_stkargs")

idainfo_readonly_idb = inf_readonly_idb
__make_idainfo_getter("readonly_idb")

idainfo_set_store_user_info = lambda *args: not inf_set_store_user_info()

idainfo_stack_ldbl = inf_stack_ldbl
__make_idainfo_getter("stack_ldbl")

idainfo_stack_varargs = inf_stack_varargs
__make_idainfo_getter("stack_varargs")

idainfo_use_allasm = inf_use_allasm
__make_idainfo_getter("use_allasm")

idainfo_use_gcc_layout = inf_use_gcc_layout
__make_idainfo_getter("use_gcc_layout")

macros_enabled = inf_macros_enabled
should_create_stkvars = inf_should_create_stkvars
should_trace_sp = inf_should_trace_sp
show_all_comments = inf_show_all_comments
show_comments = lambda *args: not inf_hide_comments()
show_repeatables = inf_show_repeatables

__make_idainfo_accessors(None, "is_graph_view", "set_graph_view")

SW_RPTCMT = SCF_RPTCMT
SW_ALLCMT = SCF_ALLCMT
SW_NOCMT = SCF_NOCMT
SW_LINNUM = SCF_LINNUM
SW_TESTMODE = SCF_TESTMODE
SW_SHHID_ITEM = SCF_SHHID_ITEM
SW_SHHID_FUNC = SCF_SHHID_FUNC
SW_SHHID_SEGM = SCF_SHHID_SEGM
#</pycode(py_ida)>

if _BC695:
    AF2_ANORET=AF_ANORET
    AF2_CHKUNI=AF_CHKUNI
    AF2_DATOFF=AF_DATOFF
    AF2_DOCODE=AF_DOCODE
    AF2_DODATA=AF_DODATA
    AF2_FTAIL=AF_FTAIL
    AF2_HFLIRT=AF_HFLIRT
    AF2_JUMPTBL=AF_JUMPTBL
    AF2_MEMFUNC=AF_MEMFUNC
    AF2_PURDAT=AF_PURDAT
    AF2_REGARG=AF_REGARG
    AF2_SIGCMT=AF_SIGCMT
    AF2_SIGMLT=AF_SIGMLT
    AF2_STKARG=AF_STKARG
    AF2_TRFUNC=AF_TRFUNC
    AF2_VERSP=AF_VERSP
    AF_ASCII=AF_STRLIT
    ASCF_AUTO=STRF_AUTO
    ASCF_COMMENT=STRF_COMMENT
    ASCF_GEN=STRF_GEN
    ASCF_SAVECASE=STRF_SAVECASE
    ASCF_SERIAL=STRF_SERIAL
    ASCF_UNICODE=STRF_UNICODE
    INFFL_LZERO=OFLG_LZERO
    ansi2idb=ida_idaapi._BC695.identity
    idb2scr=ida_idaapi._BC695.identity
    scr2idb=ida_idaapi._BC695.identity
    showAllComments=show_all_comments
    showComments=show_comments
    showRepeatables=show_repeatables
    toEA=to_ea
    def __wrap_hooks_callback(klass, new_name, old_name, do_call):
        bkp_name = "__real_%s" % new_name
        def __wrapper(self, *args):
            rc = getattr(self, bkp_name)(*args)
            cb = getattr(self, old_name, None)
            if cb:
                rc = do_call(cb, *args)
            return rc
        setattr(klass, bkp_name, getattr(klass, new_name))
        setattr(__wrapper, "bc695_trampoline", True)
        setattr(klass, new_name, __wrapper)
    idainfo.ASCIIbreak = idainfo.strlit_break
    idainfo.ASCIIpref = idainfo.strlit_pref
    idainfo.ASCIIsernum = idainfo.strlit_sernum
    idainfo.ASCIIzeroes = idainfo.strlit_zeroes
    idainfo.asciiflags = idainfo.strlit_flags
    idainfo.beginEA = idainfo.start_ea
    idainfo.binSize = idainfo.bin_prefix_size
    def my_get_proc_name(self):
        return [self.procname, self.procname]
    idainfo.get_proc_name = my_get_proc_name
    idainfo.graph_view = property(idainfo.is_graph_view, idainfo.set_graph_view)
    idainfo.mf = property(idainfo.is_be, idainfo.set_be)
    idainfo.namelen = idainfo.max_autoname_len
    idainfo.omaxEA = idainfo.omax_ea
    idainfo.ominEA = idainfo.omin_ea
    def make_outflags_accessors(bit):
        def getter(self):
            return (self.outflags & bit) != 0
        def setter(self, value):
            if value:
                self.outflags |= bit
            else:
                self.outflags &= ~bit
        return getter, setter
    idainfo.s_assume = property(*make_outflags_accessors(OFLG_GEN_ASSUME))
    idainfo.s_auto = property(idainfo.is_auto_enabled, idainfo.set_auto_enabled)
    idainfo.s_null = property(*make_outflags_accessors(OFLG_GEN_NULL))
    idainfo.s_org = property(*make_outflags_accessors(OFLG_GEN_ORG))
    idainfo.s_prefseg = property(*make_outflags_accessors(OFLG_PREF_SEG))
    idainfo.s_showauto = property(*make_outflags_accessors(OFLG_SHOW_AUTO))
    idainfo.s_showpref = property(*make_outflags_accessors(OFLG_SHOW_PREF))
    idainfo.s_void = property(*make_outflags_accessors(OFLG_SHOW_VOID))
    idainfo.startIP = idainfo.start_ip
    idainfo.startSP = idainfo.start_sp
    def make_lflags_accessors(bit):
        def getter(self):
            return (self.lflags & bit) != 0
        def setter(self, value):
            if value:
                self.lflags |= bit
            else:
                self.lflags &= ~bit
        return getter, setter
    idainfo.wide_high_byte_first = property(*make_lflags_accessors(LFLG_WIDE_HBF))
    def make_obsolete_accessors():
        def getter(self):
            return False
        def setter(self, value):
            pass
        return getter, setter
    idainfo.allow_nonmatched_ops = property(*make_obsolete_accessors())
    idainfo.check_manual_ops = property(*make_obsolete_accessors())



cvar = _ida_ida.cvar
