# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: fpro
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_fpro', [dirname(__file__)])
        except ImportError:
            import _ida_fpro
            return _ida_fpro
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_fpro', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_fpro = swig_import_helper()
    del swig_import_helper
else:
    import _ida_fpro
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

class qfile_t(object):
    """
    Proxy of C++ qfile_t class


    A helper class to work with FILE related functions.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __idc_cvt_id__ = _swig_property(_ida_fpro.qfile_t___idc_cvt_id___get, _ida_fpro.qfile_t___idc_cvt_id___set)
    def __init__(self, *args):
        """
        __init__(self, rhs) -> qfile_t
        __init__(self, pycobject=None) -> qfile_t


        Closes the file
        """
        this = _ida_fpro.new_qfile_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def opened(self, *args):
        """
        opened(self) -> bool


        Checks if the file is opened or not
        """
        return _ida_fpro.qfile_t_opened(self, *args)

    def close(self, *args):
        """
        close(self)
        """
        return _ida_fpro.qfile_t_close(self, *args)

    __swig_destroy__ = _ida_fpro.delete_qfile_t
    __del__ = lambda self : None;
    def open(self, *args):
        """
        open(self, filename, mode) -> bool


        Opens a file
        @param filename: the file name
        @param mode: The mode string, ala fopen() style
        @return: Boolean
        """
        return _ida_fpro.qfile_t_open(self, *args)

    def from_fp(*args):
        """
        from_fp(fp) -> qfile_t
        """
        return _ida_fpro.qfile_t_from_fp(*args)

    from_fp = staticmethod(from_fp)
    def from_cobject(*args):
        """
        from_cobject(pycobject) -> qfile_t
        """
        return _ida_fpro.qfile_t_from_cobject(*args)

    from_cobject = staticmethod(from_cobject)
    def tmpfile(*args):
        """
        tmpfile() -> qfile_t


        A static method to construct an instance using a temporary file
        """
        return _ida_fpro.qfile_t_tmpfile(*args)

    tmpfile = staticmethod(tmpfile)
    def get_fp(self, *args):
        """
        get_fp(self) -> FILE *
        """
        return _ida_fpro.qfile_t_get_fp(self, *args)

    def seek(self, *args):
        """
        seek(self, offset, whence=SEEK_SET) -> int


        Set input source position
        @return: the new position (not 0 as fseek!)
        """
        return _ida_fpro.qfile_t_seek(self, *args)

    def tell(self, *args):
        """
        tell(self) -> int64


        Returns the current position
        """
        return _ida_fpro.qfile_t_tell(self, *args)

    def readbytes(self, *args):
        """
        readbytes(self, size, big_endian) -> PyObject *


        Similar to read() but it respect the endianness
        """
        return _ida_fpro.qfile_t_readbytes(self, *args)

    def read(self, *args):
        """
        read(self, size) -> PyObject *


        Reads from the file. Returns the buffer or None
        """
        return _ida_fpro.qfile_t_read(self, *args)

    def gets(self, *args):
        """
        gets(self, size) -> PyObject *


        Reads a line from the input file. Returns the read line or None
        """
        return _ida_fpro.qfile_t_gets(self, *args)

    def writebytes(self, *args):
        """
        writebytes(self, py_buf, big_endian) -> int


        Similar to write() but it respect the endianness
        """
        return _ida_fpro.qfile_t_writebytes(self, *args)

    def write(self, *args):
        """
        write(self, py_buf) -> int


        Writes to the file. Returns 0 or the number of bytes written
        """
        return _ida_fpro.qfile_t_write(self, *args)

    def puts(self, *args):
        """
        puts(self, str) -> int
        """
        return _ida_fpro.qfile_t_puts(self, *args)

    def size(self, *args):
        """
        size(self) -> int64
        """
        return _ida_fpro.qfile_t_size(self, *args)

    def flush(self, *args):
        """
        flush(self) -> int


        Reads a single character from the file. Returns None if EOF or the read character
        """
        return _ida_fpro.qfile_t_flush(self, *args)

    def filename(self, *args):
        """
        filename(self) -> PyObject *
        """
        return _ida_fpro.qfile_t_filename(self, *args)

    def get_char(self, *args):
        """
        get_char(self) -> PyObject *
        """
        return _ida_fpro.qfile_t_get_char(self, *args)

    def put_char(self, *args):
        """
        put_char(self, chr) -> int


        Writes a single character to the file
        """
        return _ida_fpro.qfile_t_put_char(self, *args)

qfile_t_swigregister = _ida_fpro.qfile_t_swigregister
qfile_t_swigregister(qfile_t)

def qfile_t_from_fp(*args):
  """
  qfile_t_from_fp(fp) -> qfile_t
  """
  return _ida_fpro.qfile_t_from_fp(*args)

def qfile_t_from_cobject(*args):
  """
  qfile_t_from_cobject(pycobject) -> qfile_t
  """
  return _ida_fpro.qfile_t_from_cobject(*args)

def qfile_t_tmpfile(*args):
  """
  qfile_t_tmpfile() -> qfile_t
  """
  return _ida_fpro.qfile_t_tmpfile(*args)


