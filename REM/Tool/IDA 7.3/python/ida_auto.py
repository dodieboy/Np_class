# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: auto
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_auto', [dirname(__file__)])
        except ImportError:
            import _ida_auto
            return _ida_auto
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_auto', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_auto = swig_import_helper()
    del swig_import_helper
else:
    import _ida_auto
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func


def get_auto_state(*args):
  """
  get_auto_state() -> atype_t


  Get current state of autoanalyzer. If auto_state == 'AU_NONE' , IDA is
  currently not running the analysis (it could be temporarily
  interrupted to perform the user's requests, for example).
  """
  return _ida_auto.get_auto_state(*args)

def set_auto_state(*args):
  """
  set_auto_state(new_state) -> atype_t


  Set current state of autoanalyzer.
  
  @param new_state: new state of autoanalyzer (C++: atype_t)
  @return: previous state
  """
  return _ida_auto.set_auto_state(*args)
class auto_display_t(object):
    """
    Proxy of C++ auto_display_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_ida_auto.auto_display_t_type_get, _ida_auto.auto_display_t_type_set)
    ea = _swig_property(_ida_auto.auto_display_t_ea_get, _ida_auto.auto_display_t_ea_set)
    state = _swig_property(_ida_auto.auto_display_t_state_get, _ida_auto.auto_display_t_state_set)
    def __init__(self, *args):
        """
        __init__(self) -> auto_display_t
        """
        this = _ida_auto.new_auto_display_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_auto.delete_auto_display_t
    __del__ = lambda self : None;
auto_display_t_swigregister = _ida_auto.auto_display_t_swigregister
auto_display_t_swigregister(auto_display_t)
cvar = _ida_auto.cvar
AU_NONE = cvar.AU_NONE
AU_UNK = cvar.AU_UNK
AU_CODE = cvar.AU_CODE
AU_WEAK = cvar.AU_WEAK
AU_PROC = cvar.AU_PROC
AU_TAIL = cvar.AU_TAIL
AU_FCHUNK = cvar.AU_FCHUNK
AU_USED = cvar.AU_USED
AU_TYPE = cvar.AU_TYPE
AU_LIBF = cvar.AU_LIBF
AU_LBF2 = cvar.AU_LBF2
AU_LBF3 = cvar.AU_LBF3
AU_CHLB = cvar.AU_CHLB
AU_FINAL = cvar.AU_FINAL
st_Ready = cvar.st_Ready
st_Think = cvar.st_Think
st_Waiting = cvar.st_Waiting
st_Work = cvar.st_Work


def get_auto_display(*args):
  """
  get_auto_display(auto_display)


  Get structure which holds the autoanalysis indicator contents.
  
  
  @param auto_display (C++: auto_display_t  *)
  """
  return _ida_auto.get_auto_display(*args)

def show_auto(*args):
  """
  show_auto(ea, type=AU_NONE)


  Change autoanalysis indicator value.
  
  @param ea: linear address being analyzed (C++: ea_t)
  @param type: autoanalysis type (see  Autoanalysis queues ) (C++:
               atype_t)
  """
  return _ida_auto.show_auto(*args)

def show_addr(*args):
  """
  show_addr(ea)


  Show an address on the autoanalysis indicator. The address is
  displayed in the form " @:12345678".
  
  @param ea: - linear address to display (C++: ea_t)
  """
  return _ida_auto.show_addr(*args)

def set_ida_state(*args):
  """
  set_ida_state(st) -> idastate_t


  Change IDA status indicator value
  
  @param st: - new indicator status (C++: idastate_t)
  @return: old indicator status
  """
  return _ida_auto.set_ida_state(*args)

def may_create_stkvars(*args):
  """
  may_create_stkvars() -> bool


  Is it allowed to create stack variables automatically?. This function
  should be used by IDP modules before creating stack vars.
  """
  return _ida_auto.may_create_stkvars(*args)

def may_trace_sp(*args):
  """
  may_trace_sp() -> bool


  Is it allowed to trace stack pointer automatically?. This function
  should be used by IDP modules before tracing sp.
  """
  return _ida_auto.may_trace_sp(*args)

def auto_mark_range(*args):
  """
  auto_mark_range(start, end, type)


  Put range of addresses into a queue. 'start' may be higher than 'end',
  the kernel will swap them in this case. 'end' doesn't belong to the
  range.
  
  @param start (C++: ea_t)
  @param end (C++: ea_t)
  @param type (C++: atype_t)
  """
  return _ida_auto.auto_mark_range(*args)

def auto_mark(*args):
  """
  auto_mark(ea, type)


  Put single address into a queue. Queues keep addresses sorted.
  
  
  @param ea (C++: ea_t)
  @param type (C++: atype_t)
  """
  return _ida_auto.auto_mark(*args)

def auto_unmark(*args):
  """
  auto_unmark(start, end, type)


  Remove range of addresses from a queue. 'start' may be higher than
  'end', the kernel will swap them in this case. 'end' doesn't belong to
  the range.
  
  @param start (C++: ea_t)
  @param end (C++: ea_t)
  @param type (C++: atype_t)
  """
  return _ida_auto.auto_unmark(*args)

def plan_ea(*args):
  """
  plan_ea(ea)


  Plan to perform reanalysis.
  
  
  @param ea (C++: ea_t)
  """
  return _ida_auto.plan_ea(*args)

def plan_range(*args):
  """
  plan_range(sEA, eEA)


  Plan to perform reanalysis.
  
  
  @param sEA (C++: ea_t)
  @param eEA (C++: ea_t)
  """
  return _ida_auto.plan_range(*args)

def auto_make_code(*args):
  """
  auto_make_code(ea)


  Plan to make code.
  
  
  @param ea (C++: ea_t)
  """
  return _ida_auto.auto_make_code(*args)

def auto_make_proc(*args):
  """
  auto_make_proc(ea)


  Plan to make code&function.
  
  
  @param ea (C++: ea_t)
  """
  return _ida_auto.auto_make_proc(*args)

def reanalyze_callers(*args):
  """
  reanalyze_callers(ea, noret)


  Plan to reanalyze callers of the specified address. This function will
  add to 'AU_USED' queue all instructions that call (not jump to) the
  specified address.
  
  @param ea: linear address of callee (C++: ea_t)
  @param noret: !=0: the callee doesn't return, mark to undefine
                subsequent instructions in the caller. 0: do nothing.
                (C++: bool)
  """
  return _ida_auto.reanalyze_callers(*args)

def revert_ida_decisions(*args):
  """
  revert_ida_decisions(ea1, ea2)


  Delete all analysis info that IDA generated for for the given range.
  
  
  @param ea1 (C++: ea_t)
  @param ea2 (C++: ea_t)
  """
  return _ida_auto.revert_ida_decisions(*args)

def auto_apply_type(*args):
  """
  auto_apply_type(caller, callee)


  Plan to apply the callee's type to the calling point.
  
  
  @param caller (C++: ea_t)
  @param callee (C++: ea_t)
  """
  return _ida_auto.auto_apply_type(*args)

def auto_apply_tail(*args):
  """
  auto_apply_tail(tail_ea, parent_ea)


  Plan to apply the tail_ea chunk to the parent
  
  @param tail_ea: linear address of start of tail (C++: ea_t)
  @param parent_ea: linear address within parent. If BADADDR,
                    automatically try to find parent via xrefs. (C++:
                    ea_t)
  """
  return _ida_auto.auto_apply_tail(*args)

def plan_and_wait(*args):
  """
  plan_and_wait(ea1, ea2, final_pass=True) -> int


  Analyze the specified range. Try to create instructions where
  possible. Make the final pass over the specified range if specified.
  This function doesn't return until the range is analyzed.
  
  @param ea1 (C++: ea_t)
  @param ea2 (C++: ea_t)
  @param final_pass (C++: bool)
  """
  return _ida_auto.plan_and_wait(*args)

def auto_wait(*args):
  """
  auto_wait() -> bool


  Process everything in the queues and return true.
  
  @return: false if the user clicked cancel. (the wait box must be
           displayed by the caller if desired)
  """
  return _ida_auto.auto_wait(*args)

def auto_wait_range(*args):
  """
  auto_wait_range(ea1, ea2) -> ssize_t


  Process everything in the specified range and return true.
  
  @param ea1 (C++: ea_t)
  @param ea2 (C++: ea_t)
  @return: number of autoanalysis steps made. -1 if the user clicked
           cancel. (the wait box must be displayed by the caller if
           desired)
  """
  return _ida_auto.auto_wait_range(*args)

def auto_cancel(*args):
  """
  auto_cancel(ea1, ea2)


  Remove an address range (ea1..ea2) from queues 'AU_CODE' , 'AU_PROC' ,
  'AU_USED' . To remove an address range from other queues use
  'auto_unmark()' function. 'ea1' may be higher than 'ea2', the kernel
  will swap them in this case. 'ea2' doesn't belong to the range.
  
  @param ea1 (C++: ea_t)
  @param ea2 (C++: ea_t)
  """
  return _ida_auto.auto_cancel(*args)

def auto_is_ok(*args):
  """
  auto_is_ok() -> bool


  Are all queues empty? (i.e. has autoanalysis finished?).
  """
  return _ida_auto.auto_is_ok(*args)

def peek_auto_queue(*args):
  """
  peek_auto_queue(low_ea, type) -> ea_t


  Peek into a queue 'type' for an address not lower than 'low_ea'. Do
  not remove address from the queue.
  
  @param low_ea (C++: ea_t)
  @param type (C++: atype_t)
  @return: the address or  BADADDR
  """
  return _ida_auto.peek_auto_queue(*args)

def auto_get(*args):
  """
  auto_get(type, lowEA, highEA) -> ea_t


  Retrieve an address from queues regarding their priority. Returns
  'BADADDR' if no addresses not lower than 'lowEA' and less than
  'highEA' are found in the queues. Otherwise *type will have queue
  type.
  
  @param type (C++: atype_t  *)
  @param lowEA (C++: ea_t)
  @param highEA (C++: ea_t)
  """
  return _ida_auto.auto_get(*args)

def auto_recreate_insn(*args):
  """
  auto_recreate_insn(ea) -> int


  Try to create instruction
  
  @param ea: linear address of callee (C++: ea_t)
  @return: the length of the instruction or 0
  """
  return _ida_auto.auto_recreate_insn(*args)

def is_auto_enabled(*args):
  """
  is_auto_enabled() -> bool


  Get autoanalyzer state.
  """
  return _ida_auto.is_auto_enabled(*args)

def enable_auto(*args):
  """
  enable_auto(enable) -> bool


  Temporarily enable/disable autoanalyzer. Not user-facing, but rather
  because IDA sometimes need to turn AA on/off regardless of
  inf.s_genflags:INFFL_AUTO
  
  @param enable (C++: bool)
  @return: old state
  """
  return _ida_auto.enable_auto(*args)
if _BC695:
    analyze_area = plan_and_wait
    autoCancel = auto_cancel
    autoIsOk = auto_is_ok
    autoMark = auto_mark
    autoUnmark = auto_unmark
    autoWait = auto_wait
    noUsed = plan_ea
    setStat = set_ida_state
    showAddr = show_addr
    showAuto = show_auto



